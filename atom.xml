<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sa6r1na&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sa6r1na.github.io/"/>
  <updated>2017-01-27T06:15:41.000Z</updated>
  <id>http://sa6r1na.github.io/</id>
  
  <author>
    <name>Sa6r1na</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android性能测试</title>
    <link href="http://sa6r1na.github.io/2017/01/26/Android%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://sa6r1na.github.io/2017/01/26/Android性能测试/</id>
    <published>2017-01-26T03:40:45.000Z</published>
    <updated>2017-01-27T06:15:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul>
<li>性能测试：客户端的性能测试包括启动时间、内存、CPU、GPU、功耗、流量等。</li>
</ul>
<p>启动时间：</p>
<ol>
<li>首次启动–应用首次启动花费的时间</li>
<li>非首次启动–应用非首次启动所花费的时间</li>
<li>应用界面切换–使用Android提供的DisplayManager来获取activity启动的时间。</li>
</ol>
<ul>
<li>USS（Unique Set Size）:只属于本进程正在使用的物理内存大小，是单个进程的全部私有内存大小，亦即全部被该进程独占的内存大小。它揭示了运行一个特定进程的真实的内存增量大小，如果进程被终止，USS就是实际被返还给系统的内存大小。USS 是针对某个进程开始有可疑内存泄露的情况，进行检测的最佳数字。</li>
<li>PSS (Proportional Set Size):实际使用的物理内存，按照比例将共享内存分割，某一Process对共享内存的占用情况。不同于RSS的是，PSS按比例包含了其所使用的共享库大小；例如，三个进程使用同一个占用30内存页的共享库。对于三个进程中的任何一个，PSS将只包括其中的10个内存页。PSS是一个非常有用的数字，因为系统中全部进程以整体的方式被统计，对于系统中的整体内存使用是一个很好的描述。如果一个进程被终止，其PSS中所使用的共享库大小将会重新按比例分配给剩下的并且仍在使用该共享库的进程</li>
<li>VSS （Virtual Set Size）:虚拟消耗内存，包含共享库占用的内存。是单个进程全部可访问的地址空间，其大小包括可能还尚未在内存中驻留的部分。比如地址空间已经被 malloc 分配，但是还没有实际写入；对于确定单个进程实际内存使用大小， VSS 用处不大</li>
<li>RSS（Resident Set Size):实际使用物理内存，包含共享库占用的内存。是单个进程实际占用的内存大小，RSS 易被误导的原因在于， 它包括了该进程所使用的所有共享库的全部内存大小。对于单个共享库，尽管无论多少个进程使用，实际该共享库只会被装入内存一次；因此，对于单个进程的内存使用大小， RSS也不是一个精确的描述</li>
</ul>
<a id="more"></a>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ol>
<li>通过过滤关键字displayed来过滤所有activity打印的，记录日志：<br><code>adb logcat &gt; /address/logcat.txt</code><br><code>find &quot;Displayed&quot; /address/logcat.txt &gt;/newaddress/f1.txt</code></li>
</ol>
<h4 id="关于Android内存测试的方法基本分为几类"><a href="#关于Android内存测试的方法基本分为几类" class="headerlink" title="关于Android内存测试的方法基本分为几类"></a>关于Android内存测试的方法基本分为几类</h4><ol>
<li>使用android本身提供的ActivityManager.MemoryInfo()方法获取。三方工具有网易的Emmagee、安测试、腾讯的GT等。</li>
<li><p>使用android提供的 <br\><code>adb shell dumpsys meminfo | grep packagename &gt;/address/mem.txt</code><br>例子：<br><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fc3ykl781xj30yy0z60u6.jpg" alt=""><br>native和dalvik，dalvik就是我们平常说的Java堆，我们创建的对象是在这里面分配的，而bitmap是直接在native上分配的，对于内存的限制是 native+dalvik 不能超过最大限制.<br>其中size是需要的内存，而allocated是分配了的内存，对应的2列分别是native和dalvik，当总数也就是total这一列超过单个程序内存的最大限制时，OOM就很有可能会出现了。</br\></p>
</li>
<li><p>android提供的procrank :</p>
<ul>
<li><p>获取procrank、procmem、libpagemap.so 三个文件，<a href="https://share.weiyun.com/6be6ab1349a9e4a1ccb08c7cc59dccf9" target="_blank" rel="external">点击下载</a>,然后push文件<br><code>adb push procrank /system/xbin</code><br><code>adb push procmem /system/xbin</code><br><code>adb push libpagemap.so /system/lib</code></p>
</li>
<li><p>赋权<br><code>adb shell chmod 6755 /system/xbin/procrank</code><br><code>adb shell chmod 6755 /system/xbin/procmem</code><br><code>adb shell chmod 6755 /system/lib/libpagemap.so</code></p>
</li>
<li><p>执行命令<br><code>adb shell procrank | grep packagename &gt; /address/procrank.txt</code></p>
</li>
</ul>
</li>
</ol>
<h4 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h4><ol>
<li><p>利用android studio查看内存趋势图<br><img src="https://ww4.sinaimg.cn/large/006tNbRwjw1fc45ebmrlnj31kw0s8dmb.jpg" alt=""></p>
</li>
<li><p>dump java heap<br><br>点击图中的dump java heap 生成一个hprof文件。展示方式有class list view 和 package tree view。点击左面的class右面会展开instance变量。<br><img src="https://ww1.sinaimg.cn/large/006tNbRwjw1fc45ouuwr0j31du0nan1q.jpg" alt=""><br><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fc45qdevpfj31kw0ytn15.jpg" alt=""></p>
</li>
<li><p>内存分配追踪allocation tracking<br><br>点击图中allocation tracking可以选择追踪方式：group by method 和 group by allocation。<br><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fc45zy7rm7j31kw0ytjts.jpg" alt=""><br><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fc460mkszwj31kw0yt436.jpg" alt=""></p>
</li>
</ol>
<h4 id="CPU消耗"><a href="#CPU消耗" class="headerlink" title="CPU消耗"></a>CPU消耗</h4><ol>
<li><p>android提供的<br><code>adb shell dumpsys cpuinfo |grep packagename &gt;/address/cpu.txt</code></p>
</li>
<li><p>top命令<br><code>adb shell top |grep packagename&gt;/address/cpu.txt</code></p>
</li>
</ol>
<h4 id="功耗"><a href="#功耗" class="headerlink" title="功耗"></a>功耗</h4><ul>
<li>一般分为两类：软件测试和硬件测试。</li>
</ul>
<p>功耗相关的软件测试分为三类：</p>
<ol>
<li>基于Android的PowerManager.WakeLock来进行；</li>
<li>功耗的计算=CPU消耗+WakeLock消耗+数据传输+GPS消耗+WiFi连接消耗；</li>
<li>通过adb shell dumpsys battery 来获取</li>
</ol>
<p>硬件：<br>一般通过万用表或者功耗仪进行测试。</p>
<h4 id="流量"><a href="#流量" class="headerlink" title="流量"></a>流量</h4><ul>
<li>中等负荷：应用正常操作</li>
<li>高负荷：应用极限操作</li>
</ul>
<p>主要测试以下几个方面：</p>
<ol>
<li>应用首次启动流量提示</li>
<li>应用后台连续运行2小时的流量值</li>
<li>应用高负荷运行的流量峰值</li>
<li>应用中等负荷运行的流量均值</li>
</ol>
<p>测试方法：</p>
<ol>
<li>采用第三方工具，如：流量宝</li>
<li><p>通过tcpdump抓包，通过抓包工具读取包信息来获取流量</p>
<ul>
<li><code>adb shell dumpsys package</code>获取uid信息</li>
<li><code>adb shell cat /proc/uid_stat/uid/tcp_rcv</code> 获取接收的流量</li>
<li><code>adb shell cat /proc/uid_stat/uid/tcp_snd</code> 获取发送的流量</li>
</ul>
<p>通过相减得到整体流量消耗</p>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://blog.csdn.net/mdx20072419/article/details/46638275" target="_blank" rel="external">http://blog.csdn.net/mdx20072419/article/details/46638275</a> </li>
<li><a href="http://www.dzwanli.com.cn/?p=1464" target="_blank" rel="external">http://www.dzwanli.com.cn/?p=1464</a></li>
<li><a href="http://qkxue.net/info/136556/android-procrank" target="_blank" rel="external">http://qkxue.net/info/136556/android-procrank</a></li>
</ul>
<p>相关资料参考这几篇博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;性能测试：客户端的性能测试包括启动时间、内存、CPU、GPU、功耗、流量等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启动时间：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首次启动–应用首次启动花费的时间&lt;/li&gt;
&lt;li&gt;非首次启动–应用非首次启动所花费的时间&lt;/li&gt;
&lt;li&gt;应用界面切换–使用Android提供的DisplayManager来获取activity启动的时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;USS（Unique Set Size）:只属于本进程正在使用的物理内存大小，是单个进程的全部私有内存大小，亦即全部被该进程独占的内存大小。它揭示了运行一个特定进程的真实的内存增量大小，如果进程被终止，USS就是实际被返还给系统的内存大小。USS 是针对某个进程开始有可疑内存泄露的情况，进行检测的最佳数字。&lt;/li&gt;
&lt;li&gt;PSS (Proportional Set Size):实际使用的物理内存，按照比例将共享内存分割，某一Process对共享内存的占用情况。不同于RSS的是，PSS按比例包含了其所使用的共享库大小；例如，三个进程使用同一个占用30内存页的共享库。对于三个进程中的任何一个，PSS将只包括其中的10个内存页。PSS是一个非常有用的数字，因为系统中全部进程以整体的方式被统计，对于系统中的整体内存使用是一个很好的描述。如果一个进程被终止，其PSS中所使用的共享库大小将会重新按比例分配给剩下的并且仍在使用该共享库的进程&lt;/li&gt;
&lt;li&gt;VSS （Virtual Set Size）:虚拟消耗内存，包含共享库占用的内存。是单个进程全部可访问的地址空间，其大小包括可能还尚未在内存中驻留的部分。比如地址空间已经被 malloc 分配，但是还没有实际写入；对于确定单个进程实际内存使用大小， VSS 用处不大&lt;/li&gt;
&lt;li&gt;RSS（Resident Set Size):实际使用物理内存，包含共享库占用的内存。是单个进程实际占用的内存大小，RSS 易被误导的原因在于， 它包括了该进程所使用的所有共享库的全部内存大小。对于单个共享库，尽管无论多少个进程使用，实际该共享库只会被装入内存一次；因此，对于单个进程的内存使用大小， RSS也不是一个精确的描述&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>uiAutomator</title>
    <link href="http://sa6r1na.github.io/2017/01/24/uiAutomator/"/>
    <id>http://sa6r1na.github.io/2017/01/24/uiAutomator/</id>
    <published>2017-01-24T10:42:27.000Z</published>
    <updated>2017-01-26T13:24:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="小感想"><a href="#小感想" class="headerlink" title="小感想"></a>小感想</h3><ul>
<li>嗨呀，咋说呢。想学点UI自动化测试的脚本，试着琢磨琢磨了UIAutomator。一些积累的小经验在这里做个总结。网上相关的一些小资料都比较过时了，还不清楚这个uiautomator的流行程度，先说这些。</li>
</ul>
<h3 id="1-安装-amp-环境准备"><a href="#1-安装-amp-环境准备" class="headerlink" title="1.安装&amp;环境准备"></a>1.安装&amp;环境准备</h3><ul>
<li>jdk环境</li>
<li>ant工具（mac用户brew install 没有问题；完事试一下ant -version）</li>
<li>Android-sdk 必备</li>
<li>idea (目前比较流行的IDE，但是相关的uiautomator介绍真是少啊）</li>
</ul>
<a id="more"></a>
<h3 id="2-建立测试工程"><a href="#2-建立测试工程" class="headerlink" title="2.建立测试工程"></a>2.建立测试工程</h3><ul>
<li><p>用idea新建个java工程，选择command line app类型。<br><img src="https://ww1.sinaimg.cn/large/006y8lVajw1fc1xaocqb8j31kw0z3jw1.jpg" alt=""></p>
</li>
<li><p>添加junit.jar 和 android.jar uiAutomator.jar:<br>模块里面junit可以通过添加maven的依赖方式添加；另外两个直接添加就可以，目录在Android sdk目录下。/usr/local/Cellar/android-sdk/24.4.1_1/platforms/android-25/ 具体目录取决于你配置的Android-sdk的api目录。<br><img src="https://ww1.sinaimg.cn/large/006y8lVajw1fc1xdmh1j5j31kw1780y7.jpg" alt=""></p>
</li>
</ul>
<p><img src="https://ww4.sinaimg.cn/large/006y8lVajw1fc1xic5txpj31280s243s.jpg" alt=""></p>
<ul>
<li>在测试工程src目录下新建package，命名随意。然后代码写上<br><img src="https://ww3.sinaimg.cn/large/006y8lVajw1fc1xkrue3xj31kw0usamt.jpg" alt=""></li>
</ul>
<h3 id="3-查看Android版本sdk的ID值"><a href="#3-查看Android版本sdk的ID值" class="headerlink" title="3.查看Android版本sdk的ID值"></a>3.查看Android版本sdk的ID值</h3><ul>
<li>在\Android-sdk\tools\目录下，输入android list.找到项目配置的android api 例如：我的api是25 id是3.<br><img src="https://ww3.sinaimg.cn/large/006tNbRwjw1fc1ybz3q0mj31ea0x67hg.jpg" alt=""></li>
</ul>
<h3 id="4-生成build-xml文件"><a href="#4-生成build-xml文件" class="headerlink" title="4.生成build.xml文件"></a>4.生成build.xml文件</h3><p>仍然当前目录（Android-sdk\tools\）运行命令 android create uitest-project -n name -t android-sdk-ID -p project_path<br>例如： <code>android create uitest-project -n myUIautomator -t 3 -p /Users/sabrina/Documents/repository/myUIautomator</code></p>
<p>name 是生成jar包的名字可以自己定义；-t android-sdk的id刚才通过命令android list 查看到的；-p后面加路径，项目的路径。运行命令后，将会在工程的根目录下生成build.xml文件。</p>
<h3 id="5-ant配置build-xml文件"><a href="#5-ant配置build-xml文件" class="headerlink" title="5.ant配置build.xml文件"></a>5.ant配置build.xml文件</h3><ul>
<li>刚开始被这个坑了好久，xml文件里面ant.properties位置是红色的，确一直没有找到原因，猜测一定是ant没有配置什么。百度了下idea配置ant。如下图，点击ant build.把刚才的build.xml文件添加上去。点击运行能成功运行证明添加没有什么问题。</li>
</ul>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwjw1fc1y026evtj30ko15mdie.jpg" alt=""></p>
<h3 id="6-ant-build生成"><a href="#6-ant-build生成" class="headerlink" title="6.ant build生成"></a>6.ant build生成</h3><ul>
<li>进入工程目录，执行ant build。不出意外会提示成功，会在工程的bin目录下生成jar文件。</li>
</ul>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwjw1fc1y4lueqmj31ea0x6qkl.jpg" alt=""></p>
<h3 id="7-将jar文件push到手机data-local-tmp目录"><a href="#7-将jar文件push到手机data-local-tmp目录" class="headerlink" title="7.将jar文件push到手机data/local/tmp目录"></a>7.将jar文件push到手机data/local/tmp目录</h3><ul>
<li><code>adb push &lt;jar文件路径&gt; data/local/tmp</code></li>
<li><code>adb shell uiautomator runtest &lt;jar文件名&gt; -c &lt;工程中的类名（包含包名）&gt;</code></li>
</ul>
<p>例：<code>adb shell myUIautomator runtest myUIautomator.jar -c com.sabrina.CheckSize</code><br>手机便会执行脚本了，由于放假在家没有Android机，所以条件够了再检验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;小感想&quot;&gt;&lt;a href=&quot;#小感想&quot; class=&quot;headerlink&quot; title=&quot;小感想&quot;&gt;&lt;/a&gt;小感想&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;嗨呀，咋说呢。想学点UI自动化测试的脚本，试着琢磨琢磨了UIAutomator。一些积累的小经验在这里做个总结。网上相关的一些小资料都比较过时了，还不清楚这个uiautomator的流行程度，先说这些。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-安装-amp-环境准备&quot;&gt;&lt;a href=&quot;#1-安装-amp-环境准备&quot; class=&quot;headerlink&quot; title=&quot;1.安装&amp;amp;环境准备&quot;&gt;&lt;/a&gt;1.安装&amp;amp;环境准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;jdk环境&lt;/li&gt;
&lt;li&gt;ant工具（mac用户brew install 没有问题；完事试一下ant -version）&lt;/li&gt;
&lt;li&gt;Android-sdk 必备&lt;/li&gt;
&lt;li&gt;idea (目前比较流行的IDE，但是相关的uiautomator介绍真是少啊）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AndroidTool -- 很方便的Android截图、装包软件</title>
    <link href="http://sa6r1na.github.io/2017/01/02/android-tools-%E5%BE%88%E6%96%B9%E4%BE%BF%E7%9A%84Android%E6%88%AA%E5%9B%BE%E3%80%81%E8%A3%85%E5%8C%85%E8%BD%AF%E4%BB%B6/"/>
    <id>http://sa6r1na.github.io/2017/01/02/android-tools-很方便的Android截图、装包软件/</id>
    <published>2017-01-02T14:51:04.000Z</published>
    <updated>2017-01-05T09:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>很方便一款Android软件</p>
<hr>
<h3 id="feature："><a href="#feature：" class="headerlink" title="feature："></a>feature：</h3><ul>
<li>方便截图</li>
<li>录短视频</li>
<li>快速安装软件</li>
</ul>
<p>点击<a href="https://github.com/mortenjust/androidtool-mac" target="_blank" rel="external">这里</a>下载</p>
<hr>
<a id="more"></a>
<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgw1fbcp17zlftg30pl0hrdmp.gif" alt=""></p>
<hr>
<h3 id="视频录制"><a href="#视频录制" class="headerlink" title="视频录制"></a>视频录制</h3><p><img src="https://ww4.sinaimg.cn/large/006tNbRwgw1fbcp17ewcqg30pl0hr4qp.gif" alt=""></p>
<hr>
<h3 id="应用安装"><a href="#应用安装" class="headerlink" title="应用安装"></a>应用安装</h3><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgw1fbcp9agdh9g30pl0hr7wh.gif" alt=""></p>
<hr>
<p>done. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很方便一款Android软件&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;feature：&quot;&gt;&lt;a href=&quot;#feature：&quot; class=&quot;headerlink&quot; title=&quot;feature：&quot;&gt;&lt;/a&gt;feature：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;方便截图&lt;/li&gt;
&lt;li&gt;录短视频&lt;/li&gt;
&lt;li&gt;快速安装软件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击&lt;a href=&quot;https://github.com/mortenjust/androidtool-mac&quot;&gt;这里&lt;/a&gt;下载&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>xcode 简单用法</title>
    <link href="http://sa6r1na.github.io/2016/12/26/xcode-%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
    <id>http://sa6r1na.github.io/2016/12/26/xcode-简单用法/</id>
    <published>2016-12-26T02:38:22.000Z</published>
    <updated>2016-12-26T10:52:29.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装两个xcode-选中某个xcode"><a href="#安装两个xcode-选中某个xcode" class="headerlink" title="安装两个xcode 选中某个xcode"></a>安装两个xcode 选中某个xcode</h4><p><code>sudo xcode-select -s /Applications/Xcode7.app</code></p>
<h4 id="查看xcode版本"><a href="#查看xcode版本" class="headerlink" title="查看xcode版本"></a>查看xcode版本</h4><p><code>xcodebuild -version</code></p>
<a id="more"></a>
<h4 id="列出当前所有模拟器"><a href="#列出当前所有模拟器" class="headerlink" title="列出当前所有模拟器"></a>列出当前所有模拟器</h4><p><code>xcrun simctl list</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装两个xcode-选中某个xcode&quot;&gt;&lt;a href=&quot;#安装两个xcode-选中某个xcode&quot; class=&quot;headerlink&quot; title=&quot;安装两个xcode 选中某个xcode&quot;&gt;&lt;/a&gt;安装两个xcode 选中某个xcode&lt;/h4&gt;&lt;p&gt;&lt;code&gt;sudo xcode-select -s /Applications/Xcode7.app&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;查看xcode版本&quot;&gt;&lt;a href=&quot;#查看xcode版本&quot; class=&quot;headerlink&quot; title=&quot;查看xcode版本&quot;&gt;&lt;/a&gt;查看xcode版本&lt;/h4&gt;&lt;p&gt;&lt;code&gt;xcodebuild -version&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>appium ios 真机测试</title>
    <link href="http://sa6r1na.github.io/2016/12/03/appium-ios-%E7%9C%9F%E6%9C%BA%E6%B5%8B%E8%AF%95/"/>
    <id>http://sa6r1na.github.io/2016/12/03/appium-ios-真机测试/</id>
    <published>2016-12-03T12:58:14.000Z</published>
    <updated>2016-12-03T14:04:24.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="appium执行iOS真机测试的条件"><a href="#appium执行iOS真机测试的条件" class="headerlink" title="appium执行iOS真机测试的条件"></a>appium执行iOS真机测试的条件</h4><ol>
<li>一个苹果开发者ID和有效的开发者对应的配置文件及签名文件；</li>
<li>一台iOS 设备</li>
<li>获取待测应用的源码</li>
<li>一台装了Xcode和Xcode Command Line Developer Tools 的Mac机器</li>
</ol>
<a id="more"></a>
<h4 id="provisioning-Profile"><a href="#provisioning-Profile" class="headerlink" title="provisioning Profile"></a>provisioning Profile</h4><ul>
<li>要在真机上测试就需要一个有效的开发者的Distribution Certificate and Provisioning Profile</li>
<li>必须用xcode来安装应用。</li>
</ul>
<h4 id="使用appium-驱动真机测试"><a href="#使用appium-驱动真机测试" class="headerlink" title="使用appium 驱动真机测试"></a>使用appium 驱动真机测试</h4><ul>
<li>一旦设备和应用设置好了之后，就能够用如下的命令驱动真机测试。</li>
</ul>
<p><code>node . -U &lt;UDID&gt; --app &lt;bundle_id&gt;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;appium执行iOS真机测试的条件&quot;&gt;&lt;a href=&quot;#appium执行iOS真机测试的条件&quot; class=&quot;headerlink&quot; title=&quot;appium执行iOS真机测试的条件&quot;&gt;&lt;/a&gt;appium执行iOS真机测试的条件&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;一个苹果开发者ID和有效的开发者对应的配置文件及签名文件；&lt;/li&gt;
&lt;li&gt;一台iOS 设备&lt;/li&gt;
&lt;li&gt;获取待测应用的源码&lt;/li&gt;
&lt;li&gt;一台装了Xcode和Xcode Command Line Developer Tools 的Mac机器&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 调用http接口</title>
    <link href="http://sa6r1na.github.io/2016/11/22/python-%E8%B0%83%E7%94%A8http%E6%8E%A5%E5%8F%A3/"/>
    <id>http://sa6r1na.github.io/2016/11/22/python-调用http接口/</id>
    <published>2016-11-22T11:57:09.000Z</published>
    <updated>2016-11-28T14:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python调用http接口可执行例子"><a href="#python调用http接口可执行例子" class="headerlink" title="python调用http接口可执行例子"></a>python调用http接口可执行例子</h2><pre><code class="python">
<span class="keyword">import</span> urllib2

<span class="keyword">import</span> json

url = <span class="string">'http://********'</span>


headers = {<span class="string">'Host'</span>: <span class="string">'**********'</span>,
           <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,
           <span class="string">'x-appver'</span>: <span class="string">'11.5.0.0'</span>,
           <span class="string">'x-platform'</span>: <span class="string">'3'</span>,
           <span class="string">'x-access-token'</span>: <span class="string">'cf9be31afddb461dbab9e74de2f2890a'</span>
           }


data = {
    <span class="string">"recType"</span>: <span class="number">1</span>,
    <span class="string">"bizId"</span>: <span class="string">"ca4b1bdbdcfc5e4774b919f32a0ecf33"</span>,
    <span class="string">"amount"</span>: <span class="number">3</span>, <span class="string">"bizTime"</span>: <span class="number">1479806874805</span>,
    <span class="string">"comment"</span>: <span class="string">""</span>,
    <span class="string">"accountId"</span>: <span class="number">1</span>,
    <span class="string">"sourceSystem"</span>: <span class="number">30000</span>,
    <span class="string">"type"</span>: <span class="string">"family"</span>,
    <span class="string">"clientCreateTime"</span>: <span class="number">1479806877264</span>,
    <span class="string">"clientEditTime"</span>: <span class="number">1479806877264</span>,
    <span class="string">"bkId"</span>: <span class="string">"41218"</span>,
    <span class="string">"bookId"</span>: <span class="string">"41218"</span>,
    <span class="string">"categoryId"</span>: <span class="number">1001</span>,
    <span class="string">"members"</span>: [{
        <span class="string">"mid"</span>: <span class="number">48451</span>
    }]
}

<span class="comment"># data = urllib.urlencode(data)</span>
jdata = json.dumps(data)
<span class="keyword">print</span> jdata
request = urllib2.Request(url, jdata, headers)
<span class="comment"># request.add_header('x-access-token','cf9be31afddb461dbab9e74de2f2890a')</span>

response = urllib2.urlopen(request)

apicontent = response.read()

<span class="keyword">print</span> apicontent
</code></pre>
<blockquote>
<p>注意：请求头里面塞一些必要的东西就好，不必要的就不要塞了。免得报错。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python调用http接口可执行例子&quot;&gt;&lt;a href=&quot;#python调用http接口可执行例子&quot; class=&quot;headerlink&quot; title=&quot;python调用http接口可执行例子&quot;&gt;&lt;/a&gt;python调用http接口可执行例子&lt;/h2&gt;&lt;pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>adb 解决端口占用问题</title>
    <link href="http://sa6r1na.github.io/2016/11/15/adb-%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://sa6r1na.github.io/2016/11/15/adb-解决端口占用问题/</id>
    <published>2016-11-15T03:45:54.000Z</published>
    <updated>2016-11-18T03:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h4><p>C:\Users\lizy&gt;adb devices</p>
<ul>
<li><p>adb devicesadb server is out of date.  killing…</p>
</li>
<li><p>ADB server didn’t ACK<em> failed to start daemon </em>error: unknown host service</p>
</li>
</ul>
<a id="more"></a>
<h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>adb的端口（5037）被占用了。至于这个5037端口，可以参考本博客另外 一篇文章：</p>
<p><a href="http://blog.csdn.net/liranke/article/details/4999210" target="_blank" rel="external">http://blog.csdn.net/liranke/article/details/4999210</a><br>在这个文章里，详细说明了adb的原理及其源码分析。</p>
<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul>
<li>在cmd窗口:<br>C:\Users\lizy&gt;adb nodaemon server<br>cannot bind ‘tcp:5037’</li>
</ul>
<ul>
<li>C:\Users\lizy&gt;netstat -ano | findstr “5037”</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">结果</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TCP</td>
<td style="text-align:center">127.0.0.1:5037</td>
<td style="text-align:center">0.0.0.0:0</td>
<td style="text-align:center">LISTENING</td>
<td style="text-align:center">8516</td>
</tr>
<tr>
<td style="text-align:center">TCP</td>
<td style="text-align:center">127.0.0.1:5037</td>
<td style="text-align:center">127.0.0.1:59163</td>
<td style="text-align:center">TIME_WAIT</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">TCP</td>
<td style="text-align:center">127.0.0.1:5037</td>
<td style="text-align:center">127.0.0.1:59164</td>
<td style="text-align:center">TIME_WAIT</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">TCP</td>
<td style="text-align:center">127.0.0.1:5037</td>
<td style="text-align:center">127.0.0.1:59167</td>
<td style="text-align:center">TIME_WAIT</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>  ……</p>
<ul>
<li>C:\Users\lizy&gt;tasklist | findstr “8516”</li>
<li>sjk_daemon        8516 Console       1     3,071 K</li>
</ul>
<p>哦，原来是sjk_daemon进程占了adb的端口。</p>
<p>C:\Users\lizy&gt;tasklist</p>
<table>
<thead>
<tr>
<th style="text-align:center">结果</th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Image Name</td>
<td style="text-align:center">PID</td>
<td style="text-align:center">Session Name</td>
<td style="text-align:center">Session</td>
<td style="text-align:center">Mem Usage</td>
</tr>
<tr>
<td style="text-align:center">System Idle Process</td>
<td style="text-align:center">0</td>
<td style="text-align:center">Services</td>
<td style="text-align:center">0</td>
<td style="text-align:center">24 K</td>
</tr>
<tr>
<td style="text-align:center">System</td>
<td style="text-align:center">4</td>
<td style="text-align:center">Services</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1,128 K</td>
</tr>
<tr>
<td style="text-align:center">sjk_daemon</td>
<td style="text-align:center">963</td>
<td style="text-align:center">Console</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3,071 K</td>
</tr>
<tr>
<td style="text-align:center">tasklist.exe</td>
<td style="text-align:center">1260</td>
<td style="text-align:center">Console</td>
<td style="text-align:center">1</td>
<td style="text-align:center">5,856 K</td>
</tr>
</tbody>
</table>
<p>将这个进程kill掉：<br>C:\Users\lizy&gt;taskkill /f /pid 963</p>
<ul>
<li>如果这个命令提示无权限，那么，可以去windows的“任务管理器”中“进程”那个窗口，找到这个进程，将它杀掉。</li>
</ul>
<ul>
<li>再运行adb devices，就没有问题了。</li>
<li>C:\Users\lizy&gt;adb devices<br>4df7f482396a301d        device</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;错误信息：&quot;&gt;&lt;a href=&quot;#错误信息：&quot; class=&quot;headerlink&quot; title=&quot;错误信息：&quot;&gt;&lt;/a&gt;错误信息：&lt;/h4&gt;&lt;p&gt;C:\Users\lizy&amp;gt;adb devices&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;adb devicesadb server is out of date.  killing…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ADB server didn’t ACK&lt;em&gt; failed to start daemon &lt;/em&gt;error: unknown host service&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>monkey 日志分析</title>
    <link href="http://sa6r1na.github.io/2016/11/12/monkey-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    <id>http://sa6r1na.github.io/2016/11/12/monkey-日志分析/</id>
    <published>2016-11-12T12:36:01.000Z</published>
    <updated>2016-11-12T12:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Monkey日志的保存方法"><a href="#Monkey日志的保存方法" class="headerlink" title="Monkey日志的保存方法"></a>Monkey日志的保存方法</h4><p>1.保存在pc中，代码入下：</p>
<p> <code>adb shell monkey [option] &lt;count&gt; &gt; d:\monkey.txt</code></p>
<p>2.保存在手机中:</p>
<a id="more"></a>
<p><code>adb shell</code><br><code>monkey [option] &lt;count&gt; &gt; /mnt/sdcard/monkey.txt</code></p>
<p>3.标注流和错误流分开保存，代码如下：</p>
<p><code>Monkey [option] &lt;count&gt; 1&gt;/sdcard/monkey.txt 2&gt;/sdcard/error.txt</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Monkey日志的保存方法&quot;&gt;&lt;a href=&quot;#Monkey日志的保存方法&quot; class=&quot;headerlink&quot; title=&quot;Monkey日志的保存方法&quot;&gt;&lt;/a&gt;Monkey日志的保存方法&lt;/h4&gt;&lt;p&gt;1.保存在pc中，代码入下：&lt;/p&gt;
&lt;p&gt; &lt;code&gt;adb shell monkey [option] &amp;lt;count&amp;gt; &amp;gt; d:\monkey.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.保存在手机中:&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sublime 添加转换json插件</title>
    <link href="http://sa6r1na.github.io/2016/11/11/sublime-%E6%B7%BB%E5%8A%A0%E8%BD%AC%E6%8D%A2json%E6%8F%92%E4%BB%B6/"/>
    <id>http://sa6r1na.github.io/2016/11/11/sublime-添加转换json插件/</id>
    <published>2016-11-11T10:28:35.000Z</published>
    <updated>2016-11-11T11:15:04.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>Tools-&gt; install package console</li>
<li>preference -&gt; package control</li>
<li>安装 pretty json 插件</li>
<li>control + alt + J  就OK啦</li>
</ol>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Tools-&amp;gt; install package console&lt;/li&gt;
&lt;li&gt;preference -&amp;gt; package control&lt;/li&gt;
&lt;li&gt;安装 pretty json 插件&lt;/li&gt;
&lt;li&gt;control + alt + J  就OK啦&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Monkey 常用adb 辅助命令</title>
    <link href="http://sa6r1na.github.io/2016/11/08/Monkey-%E5%B8%B8%E7%94%A8adb-%E8%BE%85%E5%8A%A9%E5%91%BD%E4%BB%A4/"/>
    <id>http://sa6r1na.github.io/2016/11/08/Monkey-常用adb-辅助命令/</id>
    <published>2016-11-08T14:22:00.000Z</published>
    <updated>2016-11-08T14:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="获取logcat日志信息："><a href="#获取logcat日志信息：" class="headerlink" title="获取logcat日志信息："></a>获取logcat日志信息：</h4><ul>
<li>adb shell logcat -v time &gt; log.txt</li>
</ul>
<h4 id="获取内存信息"><a href="#获取内存信息" class="headerlink" title="获取内存信息"></a>获取内存信息</h4><ul>
<li>adb shell dumpsys meminfo &lt;进程名&gt;</li>
</ul>
<a id="more"></a>
<h4 id="获取CPU消耗信息"><a href="#获取CPU消耗信息" class="headerlink" title="获取CPU消耗信息"></a>获取CPU消耗信息</h4><ul>
<li>adb shell top -n 1 | find “进程名”</li>
</ul>
<h4 id="获取电量信息"><a href="#获取电量信息" class="headerlink" title="获取电量信息"></a>获取电量信息</h4><ul>
<li>adb shell dumpsys battery</li>
</ul>
<h4 id="获取GPU信息"><a href="#获取GPU信息" class="headerlink" title="获取GPU信息"></a>获取GPU信息</h4><ul>
<li>GPU信息命令：adb shell dumpsys gfxinfo &lt;进程名&gt;</li>
</ul>
<h4 id="获取流量信息"><a href="#获取流量信息" class="headerlink" title="获取流量信息"></a>获取流量信息</h4><ul>
<li>adb shell cat/proc/uid_stat/&lt;被测应用的uid&gt;/tcp_rcv</li>
</ul>
<h4 id="获取被测应用的UID"><a href="#获取被测应用的UID" class="headerlink" title="获取被测应用的UID"></a>获取被测应用的UID</h4><ol>
<li>查看被测应用的进程ID adb shell ps | grep &lt;被测应用的包名&gt;</li>
<li>查看被测应用的用户ID（UID）adb shell cat /proc/$pid/status</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;获取logcat日志信息：&quot;&gt;&lt;a href=&quot;#获取logcat日志信息：&quot; class=&quot;headerlink&quot; title=&quot;获取logcat日志信息：&quot;&gt;&lt;/a&gt;获取logcat日志信息：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;adb shell logcat -v time &amp;gt; log.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;获取内存信息&quot;&gt;&lt;a href=&quot;#获取内存信息&quot; class=&quot;headerlink&quot; title=&quot;获取内存信息&quot;&gt;&lt;/a&gt;获取内存信息&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;adb shell dumpsys meminfo &amp;lt;进程名&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://sa6r1na.github.io/2016/11/07/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://sa6r1na.github.io/2016/11/07/git常用命令/</id>
    <published>2016-11-07T04:28:24.000Z</published>
    <updated>2016-11-10T05:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="clone-克隆项目"><a href="#clone-克隆项目" class="headerlink" title="clone 克隆项目"></a>clone 克隆项目</h4><ul>
<li><code>git clone &lt;git地址&gt; &lt;本地地址&gt;</code></li>
</ul>
<h4 id="git-push-和-pull-提交代码"><a href="#git-push-和-pull-提交代码" class="headerlink" title="git push 和 pull 提交代码"></a>git push 和 pull 提交代码</h4><ul>
<li>进入工程目录下</li>
</ul>
<a id="more"></a>
<p>提交代码老三步：</p>
<ul>
<li>git add .  (添加所有文件)</li>
<li>git commit -m “本次提交的注释”</li>
<li>git push</li>
</ul>
<p>拉代码就一步：</p>
<ul>
<li>git pull</li>
</ul>
<h4 id="git-新建、切换、删除分支"><a href="#git-新建、切换、删除分支" class="headerlink" title="git 新建、切换、删除分支"></a>git 新建、切换、删除分支</h4><ul>
<li>git branch -a   查看本地分支</li>
<li>git checkout -b &lt;分支名&gt;   新建并切换到本地分支</li>
<li>git checkout &lt;分支名&gt;  切换到某分支</li>
<li>git branch -d &lt;分支名&gt;  删除分支</li>
<li>git merge &lt;分支名&gt;  合并某分支到当前分支</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;clone-克隆项目&quot;&gt;&lt;a href=&quot;#clone-克隆项目&quot; class=&quot;headerlink&quot; title=&quot;clone 克隆项目&quot;&gt;&lt;/a&gt;clone 克隆项目&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;git地址&amp;gt; &amp;lt;本地地址&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;git-push-和-pull-提交代码&quot;&gt;&lt;a href=&quot;#git-push-和-pull-提交代码&quot; class=&quot;headerlink&quot; title=&quot;git push 和 pull 提交代码&quot;&gt;&lt;/a&gt;git push 和 pull 提交代码&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;进入工程目录下&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>monkey常用命令---参数篇</title>
    <link href="http://sa6r1na.github.io/2016/11/06/monkey%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://sa6r1na.github.io/2016/11/06/monkey常用命令/</id>
    <published>2016-11-06T12:15:34.000Z</published>
    <updated>2016-11-06T14:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="启动的命令行脚本："><a href="#启动的命令行脚本：" class="headerlink" title="启动的命令行脚本："></a>启动的命令行脚本：</h4><p><code>monkey [option] &lt;count&gt;</code></p>
<h4 id="options可简单划分为五类："><a href="#options可简单划分为五类：" class="headerlink" title="options可简单划分为五类："></a>options可简单划分为五类：</h4><ul>
<li>基本配置类参数</li>
<li>事件类型和频率参数</li>
<li>约束限制类参数</li>
<li>调试类参数</li>
<li>官方隐藏类参数</li>
</ul>
<a id="more"></a>
<ol>
<li>基本配置类参数<ul>
<li>–help 输出使用方法</li>
<li>-v  反馈信息的级别。Level 0 提供较少信息；level 1（-v-v）较为详细；level 2（-v-v-v）例如：adb shell monkey -v-v 10</li>
</ul>
</li>
<li><p>事件类型和频率参数</p>
<ul>
<li>-s <seed> 伪随机数生成器的种子值（种子值自己刚开始不太理解，参考了一些网上的说法应该就是你定义一个随机数列的时候需要给出的一个基准值，根据你给出的这个值生成一个随机数列。）</seed></li>
<li>–throttle &lt;毫秒数&gt; 事件之间的固定延迟。</li>
<li>–pct-touch &lt;百分比&gt; 调整触摸事件的百分比</li>
<li>–pct-motion &lt;百分比&gt;  调整动作事件的百分比（屏幕上某处的一个down事件，一个伪随机事件和一个up事件组成）</li>
<li>–pct-pinchzoom &lt;百分比&gt; 调整二指缩放事件的百分比</li>
<li>–pct-trackball &lt;百分比&gt; 调整轨迹事件的百分比</li>
<li>–pct-rotation &lt;百分比&gt; 调整屏幕旋转事件的百分比</li>
<li>–pct-nav &lt;百分比&gt; 调整基本导航事件的百分比</li>
<li>–pct-majornav &lt;百分比&gt; 调整主要导航事件的百分比（引发图形界面的动作，如5-way键盘的中间按键、回退按键、菜单按键）（5-way 键盘百度了下没有什么太多的解释，大概就是手机的侧边的按键）</li>
<li>–pct-syskeys &lt;百分比&gt; 调整系统按键事件的百分比</li>
<li>–pct-appswitch &lt;百分比&gt; 调整启动activity的百分比</li>
<li>–pct-flip &lt;百分比&gt; 调整键盘事件的百分比</li>
<li>-p &lt;包名&gt; 指定包名</li>
<li>-c &lt;类别&gt; 指定类名</li>
</ul>
</li>
<li><p>调试类参数 </p>
<ul>
<li>–dbg-no-events 和-v、一个或几个包约束，保持运行monkey30秒或者更长时间的非零值联合起来。可以理解为debug</li>
<li>–hprof 将monkey事件执行之前和之后生成的文件快照文件存放于手机的data/misc目录。文件较大，慎用</li>
<li>–ignore-crashes 忽略奔溃继续执行</li>
<li>–ignore-timeouts 忽略超时</li>
<li>–ignore-security-exception 忽略程序许可错误（比如请求系统许可个什么什么权限失败了）</li>
<li>–kill-process-after-error 通知系统有出错的进程了，让系统停止这个进程</li>
<li>–monitor-native-crashes 监视并且报告本地代码的崩溃事件</li>
<li>–wait-dbg 停止执行中的monkey，直到有调试器连接</li>
</ul>
</li>
<li><p>官方隐藏类参数</p>
<ul>
<li>–pkg-blacklist-file &lt;黑名单文件&gt; 不测试处于黑名单中记录的包（包名一行一个）</li>
<li>–pkg-whitelist-file &lt;白名单文件&gt; 只测试白名单之内的包</li>
<li>-f &lt;脚本文件&gt; 指定用户执行用户自定义的脚本文件</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;启动的命令行脚本：&quot;&gt;&lt;a href=&quot;#启动的命令行脚本：&quot; class=&quot;headerlink&quot; title=&quot;启动的命令行脚本：&quot;&gt;&lt;/a&gt;启动的命令行脚本：&lt;/h4&gt;&lt;p&gt;&lt;code&gt;monkey [option] &amp;lt;count&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;options可简单划分为五类：&quot;&gt;&lt;a href=&quot;#options可简单划分为五类：&quot; class=&quot;headerlink&quot; title=&quot;options可简单划分为五类：&quot;&gt;&lt;/a&gt;options可简单划分为五类：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基本配置类参数&lt;/li&gt;
&lt;li&gt;事件类型和频率参数&lt;/li&gt;
&lt;li&gt;约束限制类参数&lt;/li&gt;
&lt;li&gt;调试类参数&lt;/li&gt;
&lt;li&gt;官方隐藏类参数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>adb常用命令</title>
    <link href="http://sa6r1na.github.io/2016/11/04/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://sa6r1na.github.io/2016/11/04/adb常用命令/</id>
    <published>2016-11-04T15:34:18.000Z</published>
    <updated>2016-11-14T13:00:07.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="关闭或者开启服务"><a href="#关闭或者开启服务" class="headerlink" title="关闭或者开启服务"></a>关闭或者开启服务</h4><ul>
<li>adb kill-server</li>
<li>adb start-server</li>
</ul>
<h4 id="查看当前连接的设备"><a href="#查看当前连接的设备" class="headerlink" title="查看当前连接的设备"></a>查看当前连接的设备</h4><ul>
<li>adb devices</li>
</ul>
<a id="more"></a>
<h4 id="直接选定设备来执行命令"><a href="#直接选定设备来执行命令" class="headerlink" title="直接选定设备来执行命令"></a>直接选定设备来执行命令</h4><ul>
<li>-d 真机</li>
<li>-e 模拟器</li>
<li><p>-s 序列号</p>
</li>
<li><p>adb -d install hello.apk</p>
</li>
<li>adb -s emulator -5556 install hello.apk</li>
<li>adb -s <udid> install XXX.apk</udid></li>
</ul>
<h4 id="上传和下载文件"><a href="#上传和下载文件" class="headerlink" title="上传和下载文件"></a>上传和下载文件</h4><ul>
<li>adb push &lt;本地文件&gt;&lt;远程路径&gt;   adb push hello.apk system/app</li>
<li>adb pull &lt;远程文件&gt;&lt;本地路径&gt;   adb pull system/app/hello.apk F:\</li>
</ul>
<h4 id="常用adb-shell-命令"><a href="#常用adb-shell-命令" class="headerlink" title="常用adb shell 命令"></a>常用adb shell 命令</h4><ul>
<li>getprop 显示系统属性信息</li>
<li>setprop <key> <value> 设置系统属性信息</value></key></li>
<li>service list 显示系统服务列表   </li>
<li>ps 列出系统进程</li>
<li>ls</li>
<li>df 检查文件系统的磁盘空间占用情况</li>
<li>cat</li>
<li>kill</li>
</ul>
<h4 id="显示系统数据信息-如："><a href="#显示系统数据信息-如：" class="headerlink" title="显示系统数据信息 如："></a>显示系统数据信息 如：</h4><ul>
<li>dumpsys wifi 显示wifi信息</li>
<li>dumpsys cpuinfo 显示cpu信息</li>
<li>dumpsys meminfo com.android.lanucher2 显示launcher2的内存使用情况</li>
<li>adb shell dumpsys activity 显示系统Activity信息</li>
</ul>
<h4 id="adb卸载安装"><a href="#adb卸载安装" class="headerlink" title="adb卸载安装"></a>adb卸载安装</h4><ul>
<li>安装： adb install test.apk</li>
<li>启动： adb shell am start -n com.sample.app/.MainActivity</li>
<li>卸载： adb uninstall test.apk</li>
<li>覆盖安装： adb install -r test.apk</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;关闭或者开启服务&quot;&gt;&lt;a href=&quot;#关闭或者开启服务&quot; class=&quot;headerlink&quot; title=&quot;关闭或者开启服务&quot;&gt;&lt;/a&gt;关闭或者开启服务&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;adb kill-server&lt;/li&gt;
&lt;li&gt;adb start-server&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;查看当前连接的设备&quot;&gt;&lt;a href=&quot;#查看当前连接的设备&quot; class=&quot;headerlink&quot; title=&quot;查看当前连接的设备&quot;&gt;&lt;/a&gt;查看当前连接的设备&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;adb devices&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
