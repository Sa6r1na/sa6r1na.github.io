<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sa6r1na</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-30T03:55:22.240Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lingbei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac下zsh环境变量踩坑经验</title>
    <link href="http://yoursite.com/2019/12/30/Mac%E4%B8%8Bzsh%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%B8%A9%E5%9D%91%E7%BB%8F%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/12/30/Mac下zsh环境变量踩坑经验/</id>
    <published>2019-12-30T03:17:21.000Z</published>
    <updated>2019-12-30T03:55:22.240Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、配置bash-profile"><a href="#一、配置bash-profile" class="headerlink" title="一、配置bash_profile"></a>一、配置bash_profile</h3><p>/Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home 打开终端，进入当前用户的home目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/</span><br></pre></td></tr></table></figure><p>打开.bash_profile并编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .bash_profile</span><br></pre></td></tr></table></figure><p>在文件的末尾加入这一行语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_211.jdk/Contents/Home</span><br></pre></td></tr></table></figure><p>编辑后保存.bash_profile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><p>按照上述的修改之后，发现环境变量依然没有生效。</p><h3 id="二、配置zshrc"><a href="#二、配置zshrc" class="headerlink" title="二、配置zshrc"></a>二、配置zshrc</h3><p>按照如上修改了~/.bash_profile文件发现无效，并且提示 zsh: command not found 那么肯定是安装了zsh的缘故，因为安装zsh，~/.bash_profile就不会被执行，解决办法如下：</p><p>1.打开vim ~/.zshrc 将你要配置到环境变量配置到该文件中即可</p><p>2.打开vim ~/.zshrc 添加source ~/.bash_profile ，这样~/.bash_profile配置的环境变量同样有效</p><h3 id="三、配置文件优先级"><a href="#三、配置文件优先级" class="headerlink" title="三、配置文件优先级"></a>三、配置文件优先级</h3><p>1）/etc/profile/ —&gt; 2) /etc/paths —&gt; 3) /etc/bashrc —&gt; 4) ~/.bash_profile 或  ~/.bashrc —&gt; 5) ~/.bash_login —&gt; 6) ~/.bash_profile </p><p>其中，/etc/profile, /etc/paths,  /etc/bashrc 是系统级别配置文件，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果~/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果~/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。对此，修改前2个，需要ROOT权限。而且修改是全局的。一般不建议修改/etc/profile和/etc/bashrc 文件，而去修改/etc/paths文件</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>作者：程序员雨晨<a href="https://www.jianshu.com/p/a85658902f26来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。" target="_blank" rel="noopener">https://www.jianshu.com/p/a85658902f26来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><p>作者：顾顾314链接：<a href="https://www.jianshu.com/p/27faa48acdd1来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。" target="_blank" rel="noopener">https://www.jianshu.com/p/27faa48acdd1来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><p>作者：TangFly<br>链接：<a href="https://www.jianshu.com/p/acc248904bdb" target="_blank" rel="noopener">https://www.jianshu.com/p/acc248904bdb</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、配置bash-profile&quot;&gt;&lt;a href=&quot;#一、配置bash-profile&quot; class=&quot;headerlink&quot; title=&quot;一、配置bash_profile&quot;&gt;&lt;/a&gt;一、配置bash_profile&lt;/h3&gt;&lt;p&gt;/Library/Java/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac下jenkins搭建与配置</title>
    <link href="http://yoursite.com/2019/05/29/mac%E4%B8%8Bjenkins%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/05/29/mac下jenkins搭建与配置/</id>
    <published>2019-05-29T06:50:38.000Z</published>
    <updated>2019-05-29T12:27:40.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h2><h3 id="1-java环境"><a href="#1-java环境" class="headerlink" title="1. java环境"></a>1. java环境</h3><h3 id="2-Apache"><a href="#2-Apache" class="headerlink" title="2. Apache"></a>2. Apache</h3><ul><li>mac系统自带</li></ul><h2 id="二、安装Jenkins"><a href="#二、安装Jenkins" class="headerlink" title="二、安装Jenkins"></a>二、安装Jenkins</h2><h3 id="1-下载安装Jenkins"><a href="#1-下载安装Jenkins" class="headerlink" title="1.下载安装Jenkins"></a>1.下载安装Jenkins</h3><h3 id="2-启动Jenkins"><a href="#2-启动Jenkins" class="headerlink" title="2.启动Jenkins"></a>2.启动Jenkins</h3><h4 id="浏览器打开"><a href="#浏览器打开" class="headerlink" title="浏览器打开"></a>浏览器打开</h4><ul><li>localhost:8080，能正常进入Jenkins首页证明安装成功</li></ul><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java -jar jenkins.war</span><br></pre></td></tr></table></figure><p>遇到<br>Error: Unable to access jarfile jenkins.war</p><h2 id="三、配置Jenkins"><a href="#三、配置Jenkins" class="headerlink" title="三、配置Jenkins"></a>三、配置Jenkins</h2><h3 id="1-重启电脑"><a href="#1-重启电脑" class="headerlink" title="1. 重启电脑"></a>1. 重启电脑</h3><p>你会发现Jenkins给你的电脑新增了一个用户，名字就叫Jenkins（用原来的账户登录就可以）。重启后输入localhost:8080,进入重设初始密码页面，密码在密码在/Users/userName/.jenkins/secrets/initialAdminPassword**文件（权限不够的可能要sudo打开）把密码填入密码输入框中</p><h3 id="2-建议安装配置"><a href="#2-建议安装配置" class="headerlink" title="2.建议安装配置"></a>2.建议安装配置</h3><ul><li>选择推荐插件安装就行</li><li>等Jenkins重启完成</li></ul><h3 id="3-创建管理员账号"><a href="#3-创建管理员账号" class="headerlink" title="3.创建管理员账号"></a>3.创建管理员账号</h3><ul><li>用户名：LB</li><li>密码：lingbei123456</li><li>全名：lingbei</li><li>邮箱：<a href="mailto:lingbei@wacai.com" target="_blank" rel="noopener">lingbei@wacai.com</a></li></ul><p>登录成功，进入Jenkins初始界面</p><h3 id="4-系统设置"><a href="#4-系统设置" class="headerlink" title="4.系统设置"></a>4.系统设置</h3><ul><li>选择“系统管理”——“系统设置”，进入系统设置界面（可以管理全局属性、配置邮件通知）<br>全局属性下面，勾选Environment variables，增加一对键值对：</li><li>LANG = zh_CN.UTF-8</li><li>PATH = (终端中执行 echo $PATH 命令的输出，为一堆路径)</li></ul><h2 id="四、新建项目"><a href="#四、新建项目" class="headerlink" title="四、新建项目"></a>四、新建项目</h2><p>### </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/9dc3b45fbbec" target="_blank" rel="noopener">macOS Jenkins安装&amp;配置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、前提&quot;&gt;&lt;a href=&quot;#一、前提&quot; class=&quot;headerlink&quot; title=&quot;一、前提&quot;&gt;&lt;/a&gt;一、前提&lt;/h2&gt;&lt;h3 id=&quot;1-java环境&quot;&gt;&lt;a href=&quot;#1-java环境&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac下robotframework环境安装</title>
    <link href="http://yoursite.com/2019/04/23/mac%E4%B8%8Brobotframework%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/04/23/mac下robotframework环境安装/</id>
    <published>2019-04-23T04:31:28.000Z</published>
    <updated>2019-04-25T05:27:53.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h3 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h3><ul><li>brew install python(默认安装的是3)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Python has been installed as</span><br><span class="line">  /usr/local/bin/python3</span><br><span class="line"></span><br><span class="line">Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to</span><br><span class="line">`python3`, `python3-config`, `pip3` etc., respectively, have been installed into</span><br><span class="line">  /usr/local/opt/python/libexec/bin</span><br><span class="line"></span><br><span class="line">If you need Homebrew&apos;s Python 2.7 run</span><br><span class="line">  brew install python@2</span><br><span class="line"></span><br><span class="line">You can install Python packages with</span><br><span class="line">  pip3 install &lt;package&gt;</span><br><span class="line">They will install into the site-package directory</span><br><span class="line">  /usr/local/lib/python3.7/site-packages</span><br><span class="line"></span><br><span class="line">See: https://docs.brew.sh/Homebrew-and-Python</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>安装Python2.7</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/python@2-2.7.16.mojave.bott</span><br><span class="line">==&gt; Downloading from https://akamai.bintray.com/cb/cb90a15faf89116993fd85c330069</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Pouring python@2-2.7.16.mojave.bottle.1.tar.gz</span><br><span class="line">==&gt; /usr/local/Cellar/python@2/2.7.16/bin/python -s setup.py --no-user-cfg insta</span><br><span class="line">==&gt; /usr/local/Cellar/python@2/2.7.16/bin/python -s setup.py --no-user-cfg insta</span><br><span class="line">==&gt; /usr/local/Cellar/python@2/2.7.16/bin/python -s setup.py --no-user-cfg insta</span><br><span class="line">==&gt; Caveats</span><br><span class="line">Pip and setuptools have been installed. To update them</span><br><span class="line">  pip install --upgrade pip setuptools</span><br><span class="line"></span><br><span class="line">You can install Python packages with</span><br><span class="line">  pip install &lt;package&gt;</span><br><span class="line"></span><br><span class="line">They will install into the site-package directory</span><br><span class="line">  /usr/local/lib/python2.7/site-packages</span><br><span class="line"></span><br><span class="line">See: https://docs.brew.sh/Homebrew-and-Python</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/python@2/2.7.16: 3,706 files, 50.6MB</span><br></pre></td></tr></table></figure><h3 id="安装robotframework"><a href="#安装robotframework" class="headerlink" title="安装robotframework"></a>安装robotframework</h3><ul><li>pip install robotframework</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won&apos;t be maintained after that date. A future version of pip will drop support for Python 2.7.</span><br><span class="line">Collecting robotframework</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/36/c6/6f89c80ac5a526a091bd383ffdfc64c9a68d9df0c775d4b36f03d8e0ac25/robotframework-3.1.1-py2.py3-none-any.whl (601kB)</span><br><span class="line">    100% |████████████████████████████████| 604kB 8.3kB/s</span><br><span class="line">Installing collected packages: robotframework</span><br><span class="line">Successfully installed robotframework-3.1.1</span><br><span class="line">2019-04-23 12:52:50.910 osascript[46332:274027] TISFileInterrogator updateSystemInputSources false but old data invalid: currentCacheHeaderPtr nonNULL? 0, -&gt;cacheFormatVersion 0, -&gt;magicCookie 00000000, inputSourceTableCountSys 0</span><br><span class="line">Keyboard Layouts: duplicate keyboard layout identifier -14934.</span><br><span class="line">Keyboard Layouts: keyboard layout identifier -14934 has been replaced with -28673.</span><br></pre></td></tr></table></figure><ul><li>pip install robotframework-ride</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won&apos;t be maintained after that date. A future version of pip will drop support for Python 2.7.</span><br><span class="line">Collecting robotframework-ride</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/4e/a6/1835a17fa566b19c166735a9a75d55101e53b68566771ddb0b690dd4be83/robotframework_ride-1.7.3.1-py2.py3-none-any.whl (926kB)</span><br><span class="line">    100% |████████████████████████████████| 931kB 13kB/s</span><br><span class="line">Collecting Pygments (from robotframework-ride)</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/13/e5/6d710c9cf96c31ac82657bcfb441df328b22df8564d58d0c4cd62612674c/Pygments-2.3.1-py2.py3-none-any.whl (849kB)</span><br><span class="line">    100% |████████████████████████████████| 849kB 163kB/s</span><br><span class="line">Collecting Pypubsub (from robotframework-ride)</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/95/5a/1801be1a63af9250e79b8941a37b88e3ca0d660b880b9862fe9016ae6a3a/PyPubSub-3.3.0.zip (87kB)</span><br><span class="line">    100% |████████████████████████████████| 92kB 442kB/s</span><br><span class="line">Collecting Pywin32 (from robotframework-ride)</span><br><span class="line">  Could not find a version that satisfies the requirement Pywin32 (from robotframework-ride) (from versions: )</span><br><span class="line">No matching distribution found for Pywin32 (from robotframework-ride)</span><br></pre></td></tr></table></figure><h3 id="安装wxpthon"><a href="#安装wxpthon" class="headerlink" title="安装wxpthon"></a>安装wxpthon</h3><ul><li>pip install -U wxPython</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won&apos;t be maintained after that date. A future version of pip will drop support for Python 2.7.</span><br><span class="line">Collecting wxPython</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/89/4f/e1cf83bf07a22d2a3ab204a05b00bb99d838f329cfade100c116ef026b16/wxPython-4.0.4-cp27-cp27m-macosx_10_6_intel.whl (31.3MB)</span><br><span class="line">    100% |████████████████████████████████| 31.3MB 133kB/s</span><br><span class="line">Collecting six (from wxPython)</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/73/fb/00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9/six-1.12.0-py2.py3-none-any.whl</span><br><span class="line">Collecting Pillow (from wxPython)</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/61/88/fc486aa50f733ce6c94e58637df61a9f0859aa9bc5d110d765a8d59f8000/Pillow-6.0.0-cp27-cp27m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl (3.7MB)</span><br><span class="line">    100% |████████████████████████████████| 3.7MB 133kB/s</span><br><span class="line">Installing collected packages: six, Pillow, wxPython</span><br><span class="line">Successfully installed Pillow-6.0.0 six-1.12.0 wxPython-4.0.4</span><br></pre></td></tr></table></figure><h4 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collecting Pywin32 (from robotframework-ride)</span><br><span class="line">  Could not find a version that satisfies the requirement Pywin32 (from robotframework-ride) (from versions: )</span><br><span class="line">No matching distribution found for Pywin32 (from robotframework-ride)</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:robotframework/RIDE.git</span><br><span class="line">cd RIDE</span><br><span class="line">python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><ul><li>运行ride.py,成功！环境已经搭建好！</li></ul><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1g2etdjscj9j31j20ii4bq.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;h3 id=&quot;安装Python&quot;&gt;&lt;a href=&quot;#安装Python&quot; class=&quot;headerlink&quot; title=&quot;安装Python&quot;&gt;&lt;/a&gt;安装Python&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;brew install python(默认安装的是3)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Python has been installed as&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /usr/local/bin/python3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`python3`, `python3-config`, `pip3` etc., respectively, have been installed into&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /usr/local/opt/python/libexec/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;If you need Homebrew&amp;apos;s Python 2.7 run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  brew install python@2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can install Python packages with&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pip3 install &amp;lt;package&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;They will install into the site-package directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /usr/local/lib/python3.7/site-packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;See: https://docs.brew.sh/Homebrew-and-Python&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android SDK相关命令</title>
    <link href="http://yoursite.com/2019/04/04/Android-SDK%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/04/04/Android-SDK相关命令/</id>
    <published>2019-04-04T07:19:33.000Z</published>
    <updated>2019-04-04T09:37:05.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="aapt"><a href="#aapt" class="headerlink" title="aapt"></a>aapt</h2><ul><li>可以理解为编译安卓资源文件的，多了不说百度都有。是Android sdk自带的一款工具。</li></ul><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>前提要安装Android-sdk，运行aapt</li></ol><a id="more"></a><p><img src="https://s1.wacdn.com/wis/93/3acf851dfe78af29_1180x398.png" alt="alt text"></p><ol start="2"><li>运行图中命令 android update sdk –no-ui –filter ‘build-tool-23.0.1’（然而我执行失败了）不过失败了没有关系，运行Android sdk manager,安装图中的tools</li></ol><p><img src="https://s1.wacdn.com/wis/93/ed3c4b7d27f65028_1330x504.png" alt="alt text"></p><ol start="3"><li>成功</li></ol><p><img src="https://s1.wacdn.com/wis/93/f0a86ef71a501b50_1810x1194.png" alt="alt text"></p><h3 id="简单命令"><a href="#简单命令" class="headerlink" title="简单命令"></a>简单命令</h3><ol><li>aapt dump badging XXX.apk 查看apk的包名等信息</li></ol><ol start="2"><li>aapt dump configurations XXX.apk 查看apk一些配置</li></ol><p>其他的可以看下<a href="http://blog.csdn.net/g19920917/article/details/20244937" target="_blank" rel="noopener">这篇博客</a>，网上相关资源也很多，大家可以按照需求学习。</p><h3 id="校验签名"><a href="#校验签名" class="headerlink" title="校验签名"></a>校验签名</h3><ul><li>jarsigner -verify -verbose -certs apk包路径 校验签名</li></ul><h2 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h2><h3 id="查看设备是否连接"><a href="#查看设备是否连接" class="headerlink" title="查看设备是否连接"></a>查看设备是否连接</h3><ul><li>adb devices</li></ul><h3 id="安装安卓包"><a href="#安装安卓包" class="headerlink" title="安装安卓包"></a>安装安卓包</h3><ul><li>adb install XXX(安装包路径)</li></ul><h3 id="覆盖安装（升级）"><a href="#覆盖安装（升级）" class="headerlink" title="覆盖安装（升级）"></a>覆盖安装（升级）</h3><ul><li>adb install -r XXX (安装包路径)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;aapt&quot;&gt;&lt;a href=&quot;#aapt&quot; class=&quot;headerlink&quot; title=&quot;aapt&quot;&gt;&lt;/a&gt;aapt&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以理解为编译安卓资源文件的，多了不说百度都有。是Android sdk自带的一款工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;简单使用&quot;&gt;&lt;a href=&quot;#简单使用&quot; class=&quot;headerlink&quot; title=&quot;简单使用&quot;&gt;&lt;/a&gt;简单使用&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;前提要安装Android-sdk，运行aapt&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Charles抓https包</title>
    <link href="http://yoursite.com/2019/04/04/Charles%E6%8A%93https%E5%8C%85/"/>
    <id>http://yoursite.com/2019/04/04/Charles抓https包/</id>
    <published>2019-04-04T03:48:46.000Z</published>
    <updated>2019-04-04T03:49:19.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><ul><li>需要抓https包的时候，不同手机安装证书各有不同。然后问身边人和自己研究总结了几点，希望对大家有用。总结起来两大块：一个Charles的配置；一个是手机上证书的安装（坑比较多）。</li></ul><p>前提：手机要连着Charles的代理</p><a id="more"></a><h2 id="第一步：Charles的准备"><a href="#第一步：Charles的准备" class="headerlink" title="第一步：Charles的准备"></a>第一步：Charles的准备</h2><h3 id="1-Charles点击图中位置，会提示一个下载证书的地址，手机用浏览器输入。并下载"><a href="#1-Charles点击图中位置，会提示一个下载证书的地址，手机用浏览器输入。并下载" class="headerlink" title="1. Charles点击图中位置，会提示一个下载证书的地址，手机用浏览器输入。并下载"></a>1. Charles点击图中位置，会提示一个下载证书的地址，手机用浏览器输入。并下载</h3><p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdf97jhusmj313d0etdir.jpg" alt></p><p><img src="http://s1.wacdn.com/wis/527/d2d79d7728b2cbb3_779x175.png" alt></p><p>安装证书的链接：chls.pro/ssl</p><h3 id="2-配置charles的ssl-设置"><a href="#2-配置charles的ssl-设置" class="headerlink" title="2. 配置charles的ssl 设置"></a>2. 配置charles的ssl 设置</h3><p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdf9b5zx7ij308y0cm75c.jpg" alt></p><p><img src="https://ww4.sinaimg.cn/large/006tNc79gy1fdf9jmzrmxj30fr0bs0sz.jpg" alt></p><h2 id="第二步：Android手机的准备工作"><a href="#第二步：Android手机的准备工作" class="headerlink" title="第二步：Android手机的准备工作"></a>第二步：Android手机的准备工作</h2><h3 id="一-按照第一步的1操作，如果手机浏览器不行，下载不下来，就换个浏览器（比如：手机自带浏览器下载后安装不了，换QQ浏览器居然就好了）"><a href="#一-按照第一步的1操作，如果手机浏览器不行，下载不下来，就换个浏览器（比如：手机自带浏览器下载后安装不了，换QQ浏览器居然就好了）" class="headerlink" title="一. 按照第一步的1操作，如果手机浏览器不行，下载不下来，就换个浏览器（比如：手机自带浏览器下载后安装不了，换QQ浏览器居然就好了）"></a>一. 按照第一步的1操作，如果手机浏览器不行，下载不下来，就换个浏览器（比如：手机自带浏览器下载后安装不了，换QQ浏览器居然就好了）</h3><h3 id="二-换了浏览器还是提示安装失败的话，点击手机设置-》安全-》从sd卡安装，找到刚刚下的证书的名字。进行安装"><a href="#二-换了浏览器还是提示安装失败的话，点击手机设置-》安全-》从sd卡安装，找到刚刚下的证书的名字。进行安装" class="headerlink" title="二. 换了浏览器还是提示安装失败的话，点击手机设置-》安全-》从sd卡安装，找到刚刚下的证书的名字。进行安装"></a>二. 换了浏览器还是提示安装失败的话，点击手机设置-》安全-》从sd卡安装，找到刚刚下的证书的名字。进行安装</h3><p><img src="https://ww2.sinaimg.cn/large/006tNc79gy1fdf9ejvyflj30bt0l0mxh.jpg" alt></p><h3 id="三-如果这样还是不行（比如傲娇的Android-7-0的华为手机），"><a href="#三-如果这样还是不行（比如傲娇的Android-7-0的华为手机），" class="headerlink" title="三. 如果这样还是不行（比如傲娇的Android 7.0的华为手机），"></a>三. 如果这样还是不行（比如傲娇的Android 7.0的华为手机），</h3><h4 id="1-浏览器下载的时候会提示你这个证书的下载路径，如图"><a href="#1-浏览器下载的时候会提示你这个证书的下载路径，如图" class="headerlink" title="1. 浏览器下载的时候会提示你这个证书的下载路径，如图"></a>1. 浏览器下载的时候会提示你这个证书的下载路径，如图</h4><p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdf9g0d7yuj30bt0l0dfx.jpg" alt></p><h4 id="2-用手机的文件管理器打开这个文件，然后移动到sd卡的目录下。如图，（可以放在一个好找的目录比如：-emulated-0-）"><a href="#2-用手机的文件管理器打开这个文件，然后移动到sd卡的目录下。如图，（可以放在一个好找的目录比如：-emulated-0-）" class="headerlink" title="2. 用手机的文件管理器打开这个文件，然后移动到sd卡的目录下。如图，（可以放在一个好找的目录比如：/emulated/0/）"></a>2. 用手机的文件管理器打开这个文件，然后移动到sd卡的目录下。如图，（可以放在一个好找的目录比如：/emulated/0/）</h4><p><img src="https://ww3.sinaimg.cn/large/006tNc79gy1fdf9gz463hj30bt0l0gmg.jpg" alt></p><h4 id="3-还是回到设置里面的从sd卡读取，点击图中蓝色部分，然后找到刚刚移动后的证书，点击进行安装就可以了"><a href="#3-还是回到设置里面的从sd卡读取，点击图中蓝色部分，然后找到刚刚移动后的证书，点击进行安装就可以了" class="headerlink" title="3. 还是回到设置里面的从sd卡读取，点击图中蓝色部分，然后找到刚刚移动后的证书，点击进行安装就可以了"></a>3. 还是回到设置里面的从sd卡读取，点击图中蓝色部分，然后找到刚刚移动后的证书，点击进行安装就可以了</h4><p><img src="https://ww1.sinaimg.cn/large/006tNc79gy1fdf9i6j6maj30bt0l0mx7.jpg" alt></p><h2 id="第三步：iOS手机的准备工作"><a href="#第三步：iOS手机的准备工作" class="headerlink" title="第三步：iOS手机的准备工作"></a>第三步：iOS手机的准备工作</h2><h3 id="按照提示安装就好了，iOS-11以上的手机要设置-》关于手机-》证书信任设置里信任刚刚的证书就好了"><a href="#按照提示安装就好了，iOS-11以上的手机要设置-》关于手机-》证书信任设置里信任刚刚的证书就好了" class="headerlink" title="按照提示安装就好了，iOS 11以上的手机要设置-》关于手机-》证书信任设置里信任刚刚的证书就好了"></a>按照提示安装就好了，iOS 11以上的手机要设置-》关于手机-》证书信任设置里信任刚刚的证书就好了</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初衷&quot;&gt;&lt;a href=&quot;#初衷&quot; class=&quot;headerlink&quot; title=&quot;初衷&quot;&gt;&lt;/a&gt;初衷&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;需要抓https包的时候，不同手机安装证书各有不同。然后问身边人和自己研究总结了几点，希望对大家有用。总结起来两大块：一个Charles的配置；一个是手机上证书的安装（坑比较多）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前提：手机要连着Charles的代理&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用dex2jar和jd-gui实现反编译apk</title>
    <link href="http://yoursite.com/2019/04/04/%E4%BD%BF%E7%94%A8dex2jar%E5%92%8Cjd-gui%E5%AE%9E%E7%8E%B0%E5%8F%8D%E7%BC%96%E8%AF%91apk/"/>
    <id>http://yoursite.com/2019/04/04/使用dex2jar和jd-gui实现反编译apk/</id>
    <published>2019-04-04T03:46:47.000Z</published>
    <updated>2019-04-04T03:47:25.631Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>下载dex2jar(Mac版本和Windows版本都有）</li><li>下载jd-gui(Mac版本和Windows版本都有）</li></ul><p>资源都比较好找就不给出来了</p><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="1-dex2jar下载并解压"><a href="#1-dex2jar下载并解压" class="headerlink" title="1.dex2jar下载并解压"></a>1.dex2jar下载并解压</h4><ul><li>解压后看到有个d2j-dex2jar.sh文件，先用chmod 777将文件变成可执行的</li></ul><h4 id="2-将apk文件解压"><a href="#2-将apk文件解压" class="headerlink" title="2.将apk文件解压"></a>2.将apk文件解压</h4><ul><li>解压后看到有个classes.dex文件，将此文件放到dex2jar解压后文件目录下<br><img src="http://ww2.sinaimg.cn/large/006tNc79gy1ff4u6odtgkj30ro074dgd.jpg" alt></li></ul><h4 id="3-将下载后的jd-gui解压"><a href="#3-将下载后的jd-gui解压" class="headerlink" title="3.将下载后的jd-gui解压"></a>3.将下载后的jd-gui解压</h4><ul><li>解压后看到.app文件打开<br><img src="http://ww3.sinaimg.cn/large/006tNc79gy1ff4u89wgvtj30my068aa3.jpg" alt></li></ul><h4 id="4-执行反编译脚本"><a href="#4-执行反编译脚本" class="headerlink" title="4.执行反编译脚本"></a>4.执行反编译脚本</h4><ul><li>回到dex2jar解压后的目录下，执行<br><code>sh d2j-dex2jar.sh classes2.dex</code><br><img src="http://ww4.sinaimg.cn/large/006tNc79gy1ff4uak1c39j31900iw40t.jpg" alt></li></ul><h4 id="5-用jd-gui打开生成的jar文件"><a href="#5-用jd-gui打开生成的jar文件" class="headerlink" title="5.用jd-gui打开生成的jar文件"></a>5.用jd-gui打开生成的jar文件</h4><p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1ff4ublvcb2j30m00j4t96.jpg" alt></p><ul><li>就能看到里面的代码</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;下载dex2jar(Mac版本和Windows版本都有）&lt;/li&gt;
&lt;li&gt;下载jd-gui(Mac版本和Windows版本都有）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;资源都比较好找就不给出来了&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Espresso入门</title>
    <link href="http://yoursite.com/2019/04/04/Espresso%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/04/04/Espresso入门/</id>
    <published>2019-04-04T03:25:02.000Z</published>
    <updated>2019-04-04T03:45:22.302Z</updated>
    
    <content type="html"><![CDATA[<h3 id="espresso-简介"><a href="#espresso-简介" class="headerlink" title="espresso 简介"></a>espresso 简介</h3><ul><li>google官方开源的Android白盒测试框架（原理我就不讲了，因为讲也讲不透彻:joy: ） <a href="https://developer.android.google.cn/studio/test/espresso-test-recorder?hl=zh-cn" target="_blank" rel="noopener">官网地址</a></li><li>可以通过录制生成代码和手写代码两种方式写测试用例。</li><li>Espress有3个特点：</li></ul><ol><li>第一个收录在Android Testing Supporting Library底下的测试框架</li><li>模拟用户的操作</li><li>自动等待，直到UI线程空闲，才会执行测试代码</li></ol><a id="more"></a><h3 id="why-espresso"><a href="#why-espresso" class="headerlink" title="why espresso"></a>why espresso</h3><ul><li>稳定，高效；和开发共建</li><li>最吸引人的一点不过就是他的稳定了，为什么这么说。一般的UI测试框架，都会通过sleep几秒，或者校验元素是否出现等等来提升稳定性。那espresso和其他的测试框架相比的一大优点就是：他会等着被测APP的UI线程执行完毕之后再去执行test APP的线程。（具体怎么实现的，看后续例子的IdlingResource）</li><li>为什么说是高效：他偏白盒，能直接打开被测的Activity，而不用想其他黑盒的框架一样要冷启动APP后一步步点击到具体的页面</li></ul><h3 id="经典api图"><a href="#经典api图" class="headerlink" title="经典api图"></a>经典api图</h3><p> <img src="http://s1.wacdn.com/wis/525/70b3df66a963c180_1431x2000.png" alt></p><h3 id="before"><a href="#before" class="headerlink" title="before"></a>before</h3><ul><li><p>因为espresso是白盒的自动化测试框架，所以前提是你本地Android工程要能build过，正常打包。</p></li><li><p>关于build不过的各种报错以及解决办法这里不详细阐述。</p></li></ul><h3 id="espresso应用"><a href="#espresso应用" class="headerlink" title="espresso应用"></a>espresso应用</h3><h3 id="录制"><a href="#录制" class="headerlink" title="录制"></a>录制</h3><ul><li>工具栏   run-&gt; record espresso test</li><li>在手写代码遇到瓶颈时，可以录制参考下。（录制的过程在我们APP上很卡、很慢，不推荐使用；但在小demo上还算快速高效，不清楚是否是记账APP工程庞大）</li></ul><h3 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h3><h4 id="1-dependency"><a href="#1-dependency" class="headerlink" title="1. dependency"></a>1. dependency</h4><ul><li>在应用模块的 build.gradle 文件中指定测试库依赖项</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    // Required for local unit tests (JUnit 4 framework)</span><br><span class="line">    testCompile &apos;junit:junit:4.12&apos;</span><br><span class="line"></span><br><span class="line">    // Required for instrumented tests</span><br><span class="line">    androidTestCompile &apos;com.android.support:support-annotations:24.0.0&apos;</span><br><span class="line">    androidTestCompile &apos;com.android.support.test:runner:0.5&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dependency添加好之后，sync一下</li></ul><h4 id="2-demo举例"><a href="#2-demo举例" class="headerlink" title="2.demo举例"></a>2.demo举例</h4><p>写UI自动化测试用例，归结起来就是3步：</p><ol><li><p>定位View控件</p></li><li><p>操作View控件</p></li><li><p>校验View控件的状态</p></li></ol><p>对应Espresso，就是以下3个方法的调用：</p><p>onView(ViewMatcher)<br>  .perform(ViewAction)<br>  .check(ViewAssertion);</p><p>下面举一个的demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import android.support.test.espresso.contrib.RecyclerViewActions;</span><br><span class="line">import android.support.test.espresso.Espresso;</span><br><span class="line">import android.support.test.rule.ActivityTestRule;</span><br><span class="line">import android.support.test.runner.AndroidJUnit4;</span><br><span class="line">import android.test.suitebuilder.annotation.LargeTest;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Rule;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line">import static android.support.test.espresso.Espresso.onView;</span><br><span class="line">import static android.support.test.espresso.action.ViewActions.click;</span><br><span class="line">import static android.support.test.espresso.action.ViewActions.scrollTo;</span><br><span class="line">import static android.support.test.espresso.action.ViewActions.clearText;</span><br><span class="line">import static android.support.test.espresso.action.ViewActions.typeText;</span><br><span class="line">import static android.support.test.espresso.assertion.ViewAssertions.matches;</span><br><span class="line">import static android.support.test.espresso.matcher.ViewMatchers.isDisplayed;</span><br><span class="line">import static android.support.test.espresso.matcher.ViewMatchers.withId;</span><br><span class="line"></span><br><span class="line">@RunWith(AndroidJUnit4.class)</span><br><span class="line">@LargeTest</span><br><span class="line">public class SettingCurrencyTest &#123;</span><br><span class="line"></span><br><span class="line">    @Rule</span><br><span class="line">    public ActivityTestRule&lt;SettingMgrV2&gt; mActivityTestRule =</span><br><span class="line">        new ActivityTestRule&lt;&gt;(SettingMgrV2.class);</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void registerIdlingResource() &#123;</span><br><span class="line">        Espresso.registerIdlingResources(EspressoIdlingResource.getIdlingResource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Unregister your Idling Resource so it can be garbage collected and does not leak any memory.</span><br><span class="line">     */</span><br><span class="line">    @After</span><br><span class="line">    public void unregisterIdlingResource() &#123;</span><br><span class="line">        Espresso.unregisterIdlingResources(EspressoIdlingResource.getIdlingResource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void toCurrencyPage() &#123;</span><br><span class="line">        onView(withId(R.id.money)).perform(scrollTo(), click());</span><br><span class="line">        onView(withId(R.id.currency_view)).check(matches(isDisplayed()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectCurrency() &#123;</span><br><span class="line">        toCurrencyPage();</span><br><span class="line">        onView(withId(R.id.currency_view)).perform(RecyclerViewActions.actionOnItemAtPosition(4, click()));</span><br><span class="line">        //不能用手机号的控件ID，因为上次如果是手机号密码登录会导致ID不是验证码方式的ID</span><br><span class="line">        onView(withId(R.id.checkbox_agreement)).check(matches(isDisplayed()));</span><br><span class="line">        //mockLogin(1, &quot;XXXXX&quot;, &quot;&quot;);</span><br><span class="line">        mockLogin(2, &quot;XXXXX&quot;, &quot;123456&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Activity</p><ol><li>先打开被测的Activity（Activity的类需要你熟悉代码找出）</li><li>test标签写执行的测试用例脚本（本例写了最简单点的view上找元素然后点击、输入等操作）</li></ol><p>IdlingResource：</p><ol><li>测试用例启动，注册MyIdlingResource</li><li>启动被测Activity</li><li>Activity初始化，启动数据加载过程</li><li>Activity数据加载完成，执行测试用例方toCurrencyPage()</li><li>测试用例结束，反注册MyIdlingResource</li></ol><h4 id="3-运行测试用例"><a href="#3-运行测试用例" class="headerlink" title="3.运行测试用例"></a>3.运行测试用例</h4><ul><li>手机要连着电脑或者模拟器</li><li>他会再手机上装两个APP，一个被测APP，一个test APP</li><li>测试结果会在控制台展示</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>本篇写了espresso入门的知识，view上最基本的点击等操作，当然还有复杂一点的，比如被测控件是listview、CheckBox等等，后续学到了再给大家分享。</li><li>安利espresso因为对于了解客户端代码很有帮助。可以在写测试脚本中，熟悉Android工程。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;espresso-简介&quot;&gt;&lt;a href=&quot;#espresso-简介&quot; class=&quot;headerlink&quot; title=&quot;espresso 简介&quot;&gt;&lt;/a&gt;espresso 简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;google官方开源的Android白盒测试框架（原理我就不讲了，因为讲也讲不透彻:joy: ） &lt;a href=&quot;https://developer.android.google.cn/studio/test/espresso-test-recorder?hl=zh-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可以通过录制生成代码和手写代码两种方式写测试用例。&lt;/li&gt;
&lt;li&gt;Espress有3个特点：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;第一个收录在Android Testing Supporting Library底下的测试框架&lt;/li&gt;
&lt;li&gt;模拟用户的操作&lt;/li&gt;
&lt;li&gt;自动等待，直到UI线程空闲，才会执行测试代码&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Feed4Junit</title>
    <link href="http://yoursite.com/2019/04/03/Feed4Junit/"/>
    <id>http://yoursite.com/2019/04/03/Feed4Junit/</id>
    <published>2019-04-03T04:55:28.000Z</published>
    <updated>2019-04-03T05:16:25.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>是数据与代码分离的一个单测框架</li><li>在Junit测试框架上进行了扩展</li><li>支持csv和Excel文件数据源头，甚至支持直接连接数据库</li></ul><a id="more"></a><h2 id="idea引用"><a href="#idea引用" class="headerlink" title="idea引用"></a>idea引用</h2><ul><li>maven工程增加依赖</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.databene/feed4junit --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.databene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;feed4junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>引包 import org.databene.feed4junit.Feeder;</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-feed4junit/index.html" target="_blank" rel="noopener">使用 Feed4JUnit 进行数据与代码分离的 Java 单元测试</a></li></ul><h2 id="采坑"><a href="#采坑" class="headerlink" title="采坑"></a>采坑</h2><ol><li>数据文件一定要放到工程根目录下，不是src目录。否则引不到。</li><li>运行单个case带有@Test标签的报错：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: <span class="function">No tests found matching Method <span class="title">testAccessCheck_CSV</span><span class="params">(sample.test.Feed4JfromFile)</span> from org.junit.internal.requests.ClassRequest@2aa5fe93</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">at org.junit.internal.requests.FilterRequest.<span class="title">getRunner</span><span class="params">(FilterRequest.java:<span class="number">37</span>)</span></span></span><br><span class="line"><span class="function">at com.intellij.junit4.JUnit4IdeaTestRunner.<span class="title">startRunnerWithArgs</span><span class="params">(JUnit4IdeaTestRunner.java:<span class="number">49</span>)</span></span></span><br><span class="line"><span class="function">at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.<span class="title">startRunnerWithArgs</span><span class="params">(IdeaTestRunner.java:<span class="number">47</span>)</span></span></span><br><span class="line"><span class="function">at com.intellij.rt.execution.junit.JUnitStarter.<span class="title">prepareStreamsAndStart</span><span class="params">(JUnitStarter.java:<span class="number">242</span>)</span></span></span><br><span class="line"><span class="function">at com.intellij.rt.execution.junit.JUnitStarter.<span class="title">main</span><span class="params">(JUnitStarter.java:<span class="number">70</span>)</span></span></span><br></pre></td></tr></table></figure><p>没有找到合适的解决办法，网上查了下直接运行整个Test类就不会报错，试了下确实是这样。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;是数据与代码分离的一个单测框架&lt;/li&gt;
&lt;li&gt;在Junit测试框架上进行了扩展&lt;/li&gt;
&lt;li&gt;支持csv和Excel文件数据源头，甚至支持直接连接数据库&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fish简介</title>
    <link href="http://yoursite.com/2019/02/19/fish%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/02/19/fish简介/</id>
    <published>2019-02-19T03:25:37.000Z</published>
    <updated>2019-02-19T08:17:39.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>shell有好几种，目前最常用的是bash和zsh,但是他们都不如fish shell 好用。</p></li><li><p>如果你想拥有一个方便好用的 Shell，又不想学习一大堆语法，或者花费很多时间配置，那么你一定要尝试一下 Fish。</p></li></ul><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>命令安装<br><code>brew install fish</code></p></li><li><p>安装好后提示将fish的目录加入到/etc/shells文件中</p></li><li>加好之后按照提示，将fish作为默认的shell（这步按照个人需要，我对于fish的不兼容没那么介意，所以就可以用做默认的shell）</li></ul><h2 id="fish安装"><a href="#fish安装" class="headerlink" title="fish安装"></a>fish安装</h2><ol><li>自动匹配历史命令</li><li>彩色展示，蓝色是有效的命令。</li><li>自动建议，光标后灰色给出可能的选项。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>fish是单独的语法，和bash语法不是很兼容，部分需要bash编程的用不惯。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;shell有好几种，目前最常用的是bash和zsh,但是他们都不如fish shell 好用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你想拥有一个方便好用的 Shell，又不想学习一大堆语法，或者花费很多时间配置，那么你一定要尝试一下 Fish。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>重拾hexo</title>
    <link href="http://yoursite.com/2018/12/14/%E9%87%8D%E6%8B%BEhexo/"/>
    <id>http://yoursite.com/2018/12/14/重拾hexo/</id>
    <published>2018-12-14T07:05:53.000Z</published>
    <updated>2019-02-19T08:17:42.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo是什么"><a href="#hexo是什么" class="headerlink" title="hexo是什么"></a>hexo是什么</h2><ul><li>方便的搭建自己博客平台的工具</li><li>能自动关联GitHub</li><li>能本地预览、快速部署</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>下载node.js并安装（官网下载安装），默认会安装npm。</li><li>下载安装git（官网下载安装）</li><li>下载安装hexo。方法：命令行 运行npm install -g hexo（要翻墙）</li></ul><a id="more"></a><h2 id="本地搭建hexo静态博客"><a href="#本地搭建hexo静态博客" class="headerlink" title="本地搭建hexo静态博客"></a>本地搭建hexo静态博客</h2><ul><li>新建一个文件夹，如MyBlog</li><li>进入该文件夹内，右击运行git，输入：hexo init（生成hexo模板，可能要翻墙）</li><li>最后运行：hexo server （运行程序，访问本地localhost:4000可以看到博客已经搭建成功）</li></ul><h2 id="将博客与Github关联"><a href="#将博客与Github关联" class="headerlink" title="将博客与Github关联"></a>将博客与Github关联</h2><ul><li><p>在Github上创建名字为XXX.github.io的项目，XXX为自己的github用户名。</p></li><li><p>打开本地的MyBlog文件夹项目内的_config.yml配置文件，将其中的type设置为git(看图冒号后面有空格，我之前就被坑了)</p></li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy6ax52ublj314s078gn7.jpg" alt></p><ul><li>运行：npm install hexo-deployer-git –save</li><li>运行：hexo g（本地生成静态文件）</li><li>运行：hexo d（将本地静态文件推送至Github）</li></ul><p>然后打开浏览器，直接访问 <a href="https://sa6r1na.github.io/" target="_blank" rel="noopener">https://sa6r1na.github.io/</a> 就可以。</p><h2 id="写第一篇文章"><a href="#写第一篇文章" class="headerlink" title="写第一篇文章"></a>写第一篇文章</h2><ul><li>在MyBlog目录下执行：hexo new “我的第一篇文章”，会在source-&gt;_posts文件夹内生成一个.md文件。</li><li><p>编辑该文件（遵循Markdown规则）</p><ul><li>修改起始字段：</li><li>title 文章的标题</li><li>date 创建日期 （文件的创建日期 ）</li><li>updated 修改日期 （ 文件的修改日期）</li><li>comments 是否开启评论 true</li><li>tags 标签</li><li>categories 分类</li><li>permalink url中的名字（文件名）</li></ul></li><li><p>编写正文内容（MakeDown）</p><ul><li>hexo clean 删除本地静态文件（Public目录），可不执行。</li><li>hexo g 生成本地静态文件（Public目录）</li><li>hexo deploy 将本地静态文件推送至github（hexo d）</li></ul></li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>默认的主题比较丑，像我这种外貌协会一定会找个自己喜欢的主题的。方式可以通过GitHub上搜“hexo theme”,可以先看下预览图，找到自己喜欢的。</li><li>按照github上的介绍，修改_config.yml配置文件</li></ul><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fy6b3p2psqj30hg05a74m.jpg" alt></p><ul><li>预览下我的博客</li></ul><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fy6bfxt7npj31ee0psadb.jpg" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>以上，赶紧体验下hexo来写自己的博客</li><li>其他的可以看下面这篇博客，有其他的详细介绍 <a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Hexo搭建博客教程</a></li></ul><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><ul><li>电脑重装了之后博客都没有了，之前备份到github在重新下下来。注意此时主题文件是没有备份的，要重新下载。 </li><li>当前我用的主题是 <a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="noopener">apollo</a></li><li>blog目录下运行:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br><span class="line">git clone https://github.com/pinggod/hexo-theme-apollo.git themes/apollo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo是什么&quot;&gt;&lt;a href=&quot;#hexo是什么&quot; class=&quot;headerlink&quot; title=&quot;hexo是什么&quot;&gt;&lt;/a&gt;hexo是什么&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;方便的搭建自己博客平台的工具&lt;/li&gt;
&lt;li&gt;能自动关联GitHub&lt;/li&gt;
&lt;li&gt;能本地预览、快速部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;下载node.js并安装（官网下载安装），默认会安装npm。&lt;/li&gt;
&lt;li&gt;下载安装git（官网下载安装）&lt;/li&gt;
&lt;li&gt;下载安装hexo。方法：命令行 运行npm install -g hexo（要翻墙）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈测试思想理论</title>
    <link href="http://yoursite.com/2018/12/11/%E6%B5%85%E8%B0%88%E6%B5%8B%E8%AF%95%E6%80%9D%E6%83%B3%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2018/12/11/浅谈测试思想理论/</id>
    <published>2018-12-11T07:05:53.000Z</published>
    <updated>2019-02-19T03:55:32.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><h3 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h3><ul><li>本人工作3年，本科毕业，从一个小白到软件测试行业摸爬滚打已经给3年啦，不算优秀，但也算有收获。这几年自己的经验和大家分享下，总结下自己，也给新人一点点经验。</li></ul><h3 id="本篇介绍"><a href="#本篇介绍" class="headerlink" title="本篇介绍"></a>本篇介绍</h3><ul><li>主要根据自己的工作经验，总结了测试在一个项目中应该要做的事情。</li></ul><a id="more"></a><h2 id="需求阶段测试能做什么"><a href="#需求阶段测试能做什么" class="headerlink" title="需求阶段测试能做什么"></a>需求阶段测试能做什么</h2><ul><li>一些公司是测试在开发提测后才介入测试的，不建议这种方式，测试后期投入对于整个项目是不利的（因为可能遇到之前需求点不够细致，导致方案被推翻的情况）。当然至少我没有这种经历，如果公司的大环境适合这种方式我也没有意见。</li></ul><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li>【先要知道需求的背景】：搞清楚为什么要做这个需求，需求对业务的价值，这也有利于提高你的眼光。</li><li>【需求合理性评估】：<1>从业务角度review需求的合理性：要知道产品的需求和现有的业务场景是否吻合，产品是否考虑周全，是否有没考虑到的业务场景导致需求不合理、不完善；<2>从技术的角度review需求的合理性：凭借自己的经验，从技术角度分析，产品的需求是否可行，开发可能采取什么样的技术方案，产品对于技术方案有没有要求或者倾向。</2></1></li><li>【从测试角度分析需求边界】：字段过短多长、最大最小值的展示，无网络、服务异常的提示文案；这些都是测试阶段会考虑的东西，提早让产品补充，减少后期沟通成本</li><li>【埋点】：提醒产品加埋点，新功能如果产品没有加埋点要提醒产品加，方便上线后的数据收集。</li></ol><h2 id="技术评审阶段测试能做什么"><a href="#技术评审阶段测试能做什么" class="headerlink" title="技术评审阶段测试能做什么"></a>技术评审阶段测试能做什么</h2><h3 id="技术评审"><a href="#技术评审" class="headerlink" title="技术评审"></a>技术评审</h3><ul><li>会前要熟悉清楚需求，并把技术方案的相关文档先看一下。</li><li>首先要仔细听开发的技术方案，听懂开发的实现方式。并review是否能达到产品的需求。review技术方案的合理性。是否考虑周全。结合自己的测试经验，提出问题，看开发技术层面是否考虑到。</li><li>会后要结合产品需求，分析每一步的技术方案是怎么实现的，如果不清楚的需求点和技术方案及时和产品、开发问清楚。</li></ul><h2 id="提测前准备阶段"><a href="#提测前准备阶段" class="headerlink" title="提测前准备阶段"></a>提测前准备阶段</h2><h3 id="测试计划制定"><a href="#测试计划制定" class="headerlink" title="测试计划制定"></a>测试计划制定</h3><ul><li>当需求和技术方案确定后，要给出测试计划。<ul><li>具体的测试排期</li><li>投入人力的确定</li><li>测试任务分工</li><li>最重要的发布时间同步，是产品、开发侧最关心的</li></ul></li></ul><h3 id="测试分析"><a href="#测试分析" class="headerlink" title="测试分析"></a>测试分析</h3><ul><li>针对产品的需求和技术方案，分析出测试功能点和测试范围，可以用xmind脑图格式列一下。测试分析要全面，细致到具体的点，不要有遗漏。</li><li>自己梳理好测分，可以找同组成员内部review下。防止测分有疏漏。</li></ul><h3 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h3><ul><li>针对分析出的测试点，进行详细的用例设计。利用等价类划分等思路将功能点排列组合串起来，串成用例。</li><li>用例覆盖点要全面，标题要简明扼要，步骤要清晰，写清楚每个步骤的预期结果。尤其是指派给开发的测试用例以及要其他人执行的用例一定要避免含糊不清的字样，避免歧义。</li><li>一份好的用例从目录层级结构就知道你的设计思路，知道你的覆盖点是否完全。</li><li>用例要及时更新</li></ul><h2 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h2><h3 id="冒烟测试"><a href="#冒烟测试" class="headerlink" title="冒烟测试"></a>冒烟测试</h3><ul><li>用最快的速度跑通整个主流程，重要问题提早暴露，避免影响后续的测试。</li></ul><h3 id="一轮测试"><a href="#一轮测试" class="headerlink" title="一轮测试"></a>一轮测试</h3><ul><li>按照排期安排，按照用例来执行，遇到问题提bug。不同公司有自己的报bug的平台（详细见下文报bug的要求）。</li><li>及时关注进度是否落后于排期，遇到严重的bug要开发迅速解决。</li></ul><h3 id="二轮测试"><a href="#二轮测试" class="headerlink" title="二轮测试"></a>二轮测试</h3><ul><li>再开发修复一轮bug后，再按照case执行一遍，这个过程一般最好通过交叉测试来进行。避免重复执行同一个模块遇到瓶颈，思维麻木。</li></ul><h3 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h3><ul><li>【新功能回归】一般是合并master后进行，将本版本新功能主流程回归一遍，避免上线后遇到严重问题</li><li>【老功能回归】未改动部分功能回归，避免影响老功能的主流程。</li></ul><h2 id="bug要求"><a href="#bug要求" class="headerlink" title="bug要求"></a>bug要求</h2><ul><li>报bug没那么容易，要是觉得报bug是很简单的事那就大错特错了。</li></ul><h3 id="什么是bug"><a href="#什么是bug" class="headerlink" title="什么是bug"></a>什么是bug</h3><ul><li>这个问题说简单也简单，说复杂也复杂；我们普遍认为和需求不一致的就算是bug（当然需求细节点很多情况会变、会细化）</li><li>所以报bug的一个重要的前提就是：要!和!产品!确认!。</li></ul><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul><li>简明扼要，不提供干扰信息。<ul><li>尽可能的协助开发定位问题所在。不要小瞧报bug，有经验的人能尽可能提供更多必要的信息给开发，不产生干扰因素，协助开发定位问题。</li><li>举例：不是新安装才会有的问题标题就不要带“新安装”字样；最好写清楚，当前是什么样，应该是什么样。</li></ul></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>按照1、2、3。。。依次标明bug的复现步骤。而且自己要复现，按照自己写的复现步骤能复现bug，避免写的bug步骤有误。</li><li>提供必要的截图，以及视频，能更高效的帮你说明问题。</li><li>不要觉得你写的文字多浪费时间，你要是描述不清楚开发找你复现，才真是浪费时间。只要你写清楚，就可以和开发硬气的说“我写的很清楚啊，按照这个步骤就能复现。。。”</li><li>也为后续一些问题的追踪留下记录。</li></ul><h3 id="bug类型"><a href="#bug类型" class="headerlink" title="bug类型"></a>bug类型</h3><ul><li>是兼容问题还是UI问题还是功能问题，类型要选正确；<ul><li>尤其是兼容问题要备注具体哪个手机、哪个系统、哪个型号会出现。要求测试验证是否其他的手机型号就不会出现。</li></ul></li></ul><p>综上，报一个bug之前要经过反复的确认和验证才能报，并不是分分钟搞定那么简单的。</p><h2 id="bug追溯"><a href="#bug追溯" class="headerlink" title="bug追溯"></a>bug追溯</h2><ul><li>报完bug当然不是放置不管了，要控制开发改bug的节奏。让版本的质量处于自己的控制内。</li><li>一般采用给开发截止时间的方式来约束开发修复后的时间，还要留一些自己的验证的时间，一般是一轮结束前所有功能性的bug都要修复完毕验证通过</li></ul><h2 id="发布阶段"><a href="#发布阶段" class="headerlink" title="发布阶段"></a>发布阶段</h2><ul><li>走到这一阶段，恭喜项目终于要接近尾声了。</li><li>服务端的项目要发布后做好线上验证。客户端的项目可以给产品体验包去验收。让产品看下效果，有产品体验的问题要及时修复。</li><li>如果产品验收没问题了，测试要通知市场准备发布。iOS要提交审核（测试可以帮忙review是否有可能导致审核不过的因素，我们公司提交审核居然是QA来做的），Android要发布市场。</li><li>发布市场后做好线上验证，便于更早发现问题。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;h3 id=&quot;个人介绍&quot;&gt;&lt;a href=&quot;#个人介绍&quot; class=&quot;headerlink&quot; title=&quot;个人介绍&quot;&gt;&lt;/a&gt;个人介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本人工作3年，本科毕业，从一个小白到软件测试行业摸爬滚打已经给3年啦，不算优秀，但也算有收获。这几年自己的经验和大家分享下，总结下自己，也给新人一点点经验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;本篇介绍&quot;&gt;&lt;a href=&quot;#本篇介绍&quot; class=&quot;headerlink&quot; title=&quot;本篇介绍&quot;&gt;&lt;/a&gt;本篇介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;主要根据自己的工作经验，总结了测试在一个项目中应该要做的事情。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>UIautomator入门</title>
    <link href="http://yoursite.com/2018/12/11/UIautomator%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/12/11/UIautomator入门/</id>
    <published>2018-12-11T05:34:01.000Z</published>
    <updated>2019-02-19T03:55:32.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小感想"><a href="#小感想" class="headerlink" title="小感想"></a>小感想</h2><ul><li>想学点UI自动化测试的脚本，试着琢磨琢磨了UIAutomator。网上相关的一些小资料都比较过时了，一些积累的小经验在这里做个总结。还不清楚这个uiautomator的流行程度，以及有没有必要深入研究，有这方面的大神可以交流下，指点迷津。</li></ul><h3 id="1-安装-amp-环境准备"><a href="#1-安装-amp-环境准备" class="headerlink" title="1.安装&amp;环境准备"></a>1.安装&amp;环境准备</h3><ul><li>jdk环境</li><li>ant工具（mac用户brew install 没有问题；完事试一下ant -version）</li><li>Android-sdk 必备</li><li>idea (目前比较流行的IDE，但是相关的uiautomator介绍真是少啊）</li></ul><a id="more"></a><h3 id="2-建立测试工程"><a href="#2-建立测试工程" class="headerlink" title="2.建立测试工程"></a>2.建立测试工程</h3><ul><li><p>用idea新建个java工程，选择command line app类型。<br><img src="https://ww1.sinaimg.cn/large/006y8lVajw1fc1xaocqb8j31kw0z3jw1.jpg" alt></p></li><li><p>添加junit.jar 和 android.jar uiAutomator.jar:<br>模块里面junit可以通过添加maven的依赖方式添加；另外两个直接添加就可以，目录在Android sdk目录下。/usr/local/Cellar/android-sdk/24.4.1_1/platforms/android-25/ 具体目录取决于你配置的Android-sdk的api目录。<br><img src="https://ww1.sinaimg.cn/large/006y8lVajw1fc1xdmh1j5j31kw1780y7.jpg" alt></p></li></ul><p><img src="https://ww4.sinaimg.cn/large/006y8lVajw1fc1xic5txpj31280s243s.jpg" alt></p><ul><li>在测试工程src目录下新建package，命名随意。然后代码写上<br><img src="https://ww3.sinaimg.cn/large/006y8lVajw1fc1xkrue3xj31kw0usamt.jpg" alt></li></ul><h3 id="3-查看Android版本sdk的ID值"><a href="#3-查看Android版本sdk的ID值" class="headerlink" title="3.查看Android版本sdk的ID值"></a>3.查看Android版本sdk的ID值</h3><ul><li>在\Android-sdk\tools\目录下，输入android list.找到项目配置的android api 例如：我的api是25 id是3.<br><img src="https://ww3.sinaimg.cn/large/006tNbRwjw1fc1ybz3q0mj31ea0x67hg.jpg" alt></li></ul><h3 id="4-生成build-xml文件"><a href="#4-生成build-xml文件" class="headerlink" title="4.生成build.xml文件"></a>4.生成build.xml文件</h3><p>仍然当前目录（Android-sdk\tools\）运行命令 android create uitest-project -n name -t android-sdk-ID -p project_path<br>例如： <code>android create uitest-project -n myUIautomator -t 3 -p /Users/sabrina/Documents/repository/myUIautomator</code></p><p>name 是生成jar包的名字可以自己定义；-t android-sdk的id刚才通过命令android list 查看到的；-p后面加路径，项目的路径。运行命令后，将会在工程的根目录下生成build.xml文件。</p><h3 id="5-ant配置build-xml文件"><a href="#5-ant配置build-xml文件" class="headerlink" title="5.ant配置build.xml文件"></a>5.ant配置build.xml文件</h3><ul><li>刚开始被这个坑了好久，xml文件里面ant.properties位置是红色的，确一直没有找到原因，猜测一定是ant没有配置什么。百度了下idea配置ant。如下图，点击ant build.把刚才的build.xml文件添加上去。点击运行能成功运行证明添加没有什么问题。</li></ul><p><img src="https://ww3.sinaimg.cn/large/006tNbRwjw1fc1y026evtj30ko15mdie.jpg" alt></p><h3 id="6-ant-build生成"><a href="#6-ant-build生成" class="headerlink" title="6.ant build生成"></a>6.ant build生成</h3><ul><li>进入工程目录，执行ant build。不出意外会提示成功，会在工程的bin目录下生成jar文件。</li></ul><p><img src="https://ww1.sinaimg.cn/large/006tNbRwjw1fc1y4lueqmj31ea0x6qkl.jpg" alt></p><h3 id="7-将jar文件push到手机data-local-tmp目录"><a href="#7-将jar文件push到手机data-local-tmp目录" class="headerlink" title="7.将jar文件push到手机data/local/tmp目录"></a>7.将jar文件push到手机data/local/tmp目录</h3><ul><li><code>adb push &lt;jar文件路径&gt; /data/local/tmp</code></li><li><code>adb shell uiautomator runtest &lt;jar文件名&gt; -c &lt;工程中的类名（包含包名）&gt;</code></li></ul><p>例：<code>adb shell uiautomator runtest /data/local/tmpmyUIautomator.jar -c com.sabrina.CheckSize</code> </p><p>手机便会执行脚本了，算是能跑，小白入门啦。<br><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fcgvlc9kcfj30na026749.jpg" alt></p><p><img src="https://ww4.sinaimg.cn/large/006tNbRwgy1fcgvn76wnpj317u0260sq.jpg" alt></p><p><img src="https://ww2.sinaimg.cn/large/006tNbRwgy1fcgvnjmeglj31d80t6dil.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小感想&quot;&gt;&lt;a href=&quot;#小感想&quot; class=&quot;headerlink&quot; title=&quot;小感想&quot;&gt;&lt;/a&gt;小感想&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;想学点UI自动化测试的脚本，试着琢磨琢磨了UIAutomator。网上相关的一些小资料都比较过时了，一些积累的小经验在这里做个总结。还不清楚这个uiautomator的流行程度，以及有没有必要深入研究，有这方面的大神可以交流下，指点迷津。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-安装-amp-环境准备&quot;&gt;&lt;a href=&quot;#1-安装-amp-环境准备&quot; class=&quot;headerlink&quot; title=&quot;1.安装&amp;amp;环境准备&quot;&gt;&lt;/a&gt;1.安装&amp;amp;环境准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;jdk环境&lt;/li&gt;
&lt;li&gt;ant工具（mac用户brew install 没有问题；完事试一下ant -version）&lt;/li&gt;
&lt;li&gt;Android-sdk 必备&lt;/li&gt;
&lt;li&gt;idea (目前比较流行的IDE，但是相关的uiautomator介绍真是少啊）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AndroidTool-一款很方便的安卓包安装软件</title>
    <link href="http://yoursite.com/2018/07/04/AndroidTool-%E4%B8%80%E6%AC%BE%E5%BE%88%E6%96%B9%E4%BE%BF%E7%9A%84%E5%AE%89%E5%8D%93%E5%8C%85%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/07/04/AndroidTool-一款很方便的安卓包安装软件/</id>
    <published>2018-07-04T05:44:30.000Z</published>
    <updated>2019-04-04T05:45:04.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>截图</li><li>录视频</li><li>安装apk</li></ul><p>点击<a href="https://github.com/mortenjust/androidtool-mac" target="_blank" rel="noopener">这里</a> 下载</p><a id="more"></a><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="http://s1.wacdn.com/wis/74/102933f0431fd338_921x639.gif" alt></p><h2 id="录视频"><a href="#录视频" class="headerlink" title="录视频"></a>录视频</h2><p><img src="https://ww4.sinaimg.cn/large/006tNbRwgw1fbcp17ewcqg30pl0hr4qp.gif" alt></p><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><p><img src="https://ww1.sinaimg.cn/large/006tNbRwgw1fbcp9agdh9g30pl0hr7wh.gif" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;截图&lt;/li&gt;
&lt;li&gt;录视频&lt;/li&gt;
&lt;li&gt;安装apk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击&lt;a href=&quot;https://github.com/mortenjust/androidtool-mac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt; 下载&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于moco的mock server简单应用</title>
    <link href="http://yoursite.com/2018/04/04/%E5%9F%BA%E4%BA%8Emoco%E7%9A%84mock-server%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/04/基于moco的mock-server简单应用/</id>
    <published>2018-04-04T05:41:25.000Z</published>
    <updated>2019-04-04T05:42:39.261Z</updated>
    
    <content type="html"><![CDATA[<p><strong>提起mock大家应该就知道是干嘛用的了，再次再介绍一种简单的方式，基于moco的mock server。步骤很简单：</strong></p><p><strong>1.</strong> 首先，要 <a href="/uploads/files/1482402665143-moco-runner-0.10.2-standalone.jar">下载个moco的jar</a>  到桌面</p><p><strong>2.</strong> 在桌面建一个json文件，例如： </p><pre><code>[{ &quot;request&quot; : { &quot;uri&quot; : &quot;/hello&quot; }, &quot;response&quot; : { &quot;text&quot; : &quot;Hello  World !!&quot;  } ]</code></pre><p>清晰易懂，把你的请求和结果返回写上。</p><a id="more"></a><p><strong>3.</strong> 在桌面的路径执行命令（cmd和mac终端都可以,以管理员模式运行）：</p><pre><code>java -jar moco-runner-0.10.2-standalone.jar start -p 5638 -c data.json</code></pre><p><strong>注意</strong>：执行命令的时候要在这个jar的文件目录下，尽量json文件和jar文件放到一起；<br>-p 表示端口号  可以自定义 -c 后面加json文件名</p><p><strong>4.</strong> 如图就启动成功了<br><img src="http://s1.wacdn.com/wis/53/515d4c2949c3f6be_646x204.png" alt="alt text"></p><p><strong>5.</strong> 在浏览器访问 <a href="http://localhost:5638/hello" target="_blank" rel="noopener">http://localhost:5638/hello</a>  就能得到结果<br><img src="http://s1.wacdn.com/wis/53/2e6e2b2012c995a8_361x125.png" alt="alt text"></p><p>是不是很简单！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;提起mock大家应该就知道是干嘛用的了，再次再介绍一种简单的方式，基于moco的mock server。步骤很简单：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 首先，要 &lt;a href=&quot;/uploads/files/1482402665143-moco-runner-0.10.2-standalone.jar&quot;&gt;下载个moco的jar&lt;/a&gt;  到桌面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 在桌面建一个json文件，例如： &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[{ &amp;quot;request&amp;quot; : { &amp;quot;uri&amp;quot; : &amp;quot;/hello&amp;quot; }, &amp;quot;response&amp;quot; : { &amp;quot;text&amp;quot; : &amp;quot;Hello  World !!&amp;quot;  } ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;清晰易懂，把你的请求和结果返回写上。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
